//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace  Adeyn.MarketPay.AccountService
{
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Account 
    {
        /// <summary>The code of the account.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCode { get; set; }
    
        /// <summary>The beneficiary of the account.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryAccount { get; set; }
    
        /// <summary>The reason that a beneficiary has been set up for this account. This may have been supplied during the setup of a beneficiary at the discretion of the executing user.</summary>
        [Newtonsoft.Json.JsonProperty("beneficiaryMerchantReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BeneficiaryMerchantReference { get; set; }
    
        /// <summary>A description of the account.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The account's payout schedule.</summary>
        [Newtonsoft.Json.JsonProperty("payoutSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayoutScheduleResponse PayoutSchedule { get; set; }
    
        /// <summary>The status of the account. Possible values: `Active`, `Inactive`, `Suspended`, `Closed`.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountCreateNotification 
    {
        /// <summary>The details of the account creation.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        public CreateAccountResponse Content { get; set; }
    
        /// <summary>The date and time when an event has been completed.</summary>
        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDate { get; set; }
    
        /// <summary>The event type of the notification.</summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventType { get; set; }
    
        /// <summary>The user or process that has triggered the notification.</summary>
        [Newtonsoft.Json.JsonProperty("executingUserKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutingUserKey { get; set; }
    
        /// <summary>Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.</summary>
        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Always)]
        public bool Live { get; set; }
    
        /// <summary>The PSP reference of the request from which the notification originates.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountEvent 
    {
        /// <summary>The event.
        /// &gt;Permitted values: `InactivateAccount`, `RefundNotPaidOutTransfers`.
        /// For more information, refer to [Verification checks](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks).</summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountEventEvent Event { get; set; }
    
        /// <summary>The date on which the event will take place.</summary>
        [Newtonsoft.Json.JsonProperty("executionDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ExecutionDate { get; set; }
    
        /// <summary>The reason why this event has been created.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reason { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderCreateNotification 
    {
        /// <summary>The details of the account holder creation.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        public CreateAccountHolderResponse Content { get; set; }
    
        /// <summary>The date and time when an event has been completed.</summary>
        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDate { get; set; }
    
        /// <summary>The event type of the notification.</summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventType { get; set; }
    
        /// <summary>The user or process that has triggered the notification.</summary>
        [Newtonsoft.Json.JsonProperty("executingUserKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutingUserKey { get; set; }
    
        /// <summary>Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.</summary>
        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Always)]
        public bool Live { get; set; }
    
        /// <summary>The PSP reference of the request from which the notification originates.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderDetails 
    {
        /// <summary>The address of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        /// <summary>Each of the the bank accounts associated with the account holder.
        /// &gt; Each array entry should represent one bank account.
        /// &gt; For comprehensive detail regarding the required `BankAccountDetail` fields, please refer to the [KYC Verification documentation](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks).</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BankAccountDetail> BankAccountDetails { get; set; }
    
        /// <summary>Details applicable to `Business` legal entities.
        /// Populated only if the account holder's legal entity is of type `Business`.
        /// &gt; Required when being used in a `/createAccountHolder` request in which the legal entity is `Business`.</summary>
        [Newtonsoft.Json.JsonProperty("businessDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessDetails BusinessDetails { get; set; }
    
        /// <summary>The email address of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }
    
        /// <summary>The phone number of the account holder provided as a single string. It will be handled as a landline phone.
        /// **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"</summary>
        [Newtonsoft.Json.JsonProperty("fullPhoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FullPhoneNumber { get; set; }
    
        /// <summary>Details applicable to `Individual` legal entities.
        /// Populated only if the account holder's legal entity is of type `Individual`.
        /// &gt; Required when being used in a `/createAccountHolder` request in which the legal entity is `Individual`.</summary>
        [Newtonsoft.Json.JsonProperty("individualDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndividualDetails IndividualDetails { get; set; }
    
        /// <summary>The Merchant Category Code of the account holder.
        /// &gt; If not specified in the request, this will be derived from the marketplace account (which is configured by Adyen).</summary>
        [Newtonsoft.Json.JsonProperty("merchantCategoryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantCategoryCode { get; set; }
    
        /// <summary>A set of key and value pairs for general use by the account holder or merchant.
        /// The keys do not have specific names and may be used for storing miscellaneous data as desired.
        /// &gt; The values being stored have a maximum length of eighty (80) characters and will be truncated if necessary.
        /// &gt; Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }
    
        /// <summary>The URL of the website of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("webAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebAddress { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderStatus 
    {
        /// <summary>A list of events scheduled for the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AccountEvent> Events { get; set; } = new System.Collections.ObjectModel.Collection<AccountEvent>();
    
        /// <summary>The payout state of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("payoutState", Required = Newtonsoft.Json.Required.Always)]
        public AccountPayoutState PayoutState { get; set; }
    
        /// <summary>The processing state of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("processingState", Required = Newtonsoft.Json.Required.Always)]
        public AccountProcessingState ProcessingState { get; set; }
    
        /// <summary>The status of the account holder.
        /// &gt;Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountHolderStatusStatus Status { get; set; }
    
        /// <summary>The reason why the status was assigned to the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("statusReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusReason { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderStatusChangeNotification 
    {
        /// <summary>The details of the Account Holder status change.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountHolderStatusChangeNotificationContent Content { get; set; }
    
        /// <summary>The date and time when an event has been completed.</summary>
        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDate { get; set; }
    
        /// <summary>The event type of the notification.</summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventType { get; set; }
    
        /// <summary>The user or process that has triggered the notification.</summary>
        [Newtonsoft.Json.JsonProperty("executingUserKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutingUserKey { get; set; }
    
        /// <summary>Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.</summary>
        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Always)]
        public bool Live { get; set; }
    
        /// <summary>The PSP reference of the request from which the notification originates.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderStatusChangeNotificationContent 
    {
        /// <summary>The code of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The new status of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("newStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus NewStatus { get; set; }
    
        /// <summary>The former status of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("oldStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus OldStatus { get; set; }
    
        /// <summary>The reason for the status change.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reason { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderUpdateNotification 
    {
        /// <summary>The details of the Account Holder update.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        public UpdateAccountHolderResponse Content { get; set; }
    
        /// <summary>The date and time when an event has been completed.</summary>
        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDate { get; set; }
    
        /// <summary>The event type of the notification.</summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventType { get; set; }
    
        /// <summary>The user or process that has triggered the notification.</summary>
        [Newtonsoft.Json.JsonProperty("executingUserKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutingUserKey { get; set; }
    
        /// <summary>Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.</summary>
        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Always)]
        public bool Live { get; set; }
    
        /// <summary>The PSP reference of the request from which the notification originates.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderVerificationNotification 
    {
        /// <summary>The details of the Account Holder verification.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderVerificationNotificationContent Content { get; set; }
    
        /// <summary>The date and time when an event has been completed.</summary>
        [Newtonsoft.Json.JsonProperty("eventDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDate { get; set; }
    
        /// <summary>The event type of the notification.</summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventType { get; set; }
    
        /// <summary>The user or process that has triggered the notification.</summary>
        [Newtonsoft.Json.JsonProperty("executingUserKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExecutingUserKey { get; set; }
    
        /// <summary>Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.</summary>
        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Always)]
        public bool Live { get; set; }
    
        /// <summary>The PSP reference of the request from which the notification originates.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderVerificationNotificationContent 
    {
        /// <summary>The code of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The unique ID of the bank account that has been verified.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountUUID { get; set; }
    
        /// <summary>The code of the shareholder that has been verified.</summary>
        [Newtonsoft.Json.JsonProperty("shareholderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareholderCode { get; set; }
    
        /// <summary>A summary of the verification status.</summary>
        [Newtonsoft.Json.JsonProperty("statusSummary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KYCCheckSummary StatusSummary { get; set; }
    
        /// <summary>The status of verification.</summary>
        [Newtonsoft.Json.JsonProperty("verificationStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountHolderVerificationNotificationContentVerificationStatus VerificationStatus { get; set; }
    
        /// <summary>The type of validation performed.</summary>
        [Newtonsoft.Json.JsonProperty("verificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountHolderVerificationNotificationContentVerificationType VerificationType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountPayoutState 
    {
        /// <summary>Indicates whether payouts are allowed.</summary>
        [Newtonsoft.Json.JsonProperty("allowPayout", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowPayout { get; set; }
    
        /// <summary>The reason why payouts have been disabled (by the marketplace).</summary>
        [Newtonsoft.Json.JsonProperty("disableReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisableReason { get; set; }
    
        /// <summary>Indicates whether payouts have been disabled (by the marketplace) for all of the account holder's accounts.</summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Disabled { get; set; }
    
        /// <summary>The maximum amount that payouts are limited to. Only applies if payouts are allowed but limited.</summary>
        [Newtonsoft.Json.JsonProperty("payoutLimit", Required = Newtonsoft.Json.Required.Always)]
        public Amount PayoutLimit { get; set; }
    
        /// <summary>The payout tier that the account holder occupies.</summary>
        [Newtonsoft.Json.JsonProperty("tierNumber", Required = Newtonsoft.Json.Required.Always)]
        public int TierNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountProcessingState 
    {
        /// <summary>The reason why processing has been disabled.</summary>
        [Newtonsoft.Json.JsonProperty("disableReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisableReason { get; set; }
    
        /// <summary>Indicates whether the processing of payments is allowed.</summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Disabled { get; set; }
    
        /// <summary>The lower bound of the processing tier (i.e., an account holder must have processed at least this amount of money in order to be placed into this tier).</summary>
        [Newtonsoft.Json.JsonProperty("processedFrom", Required = Newtonsoft.Json.Required.Always)]
        public Amount ProcessedFrom { get; set; }
    
        /// <summary>The upper bound of the processing tier (i.e., an account holder must have processed less than this amount of money in order to be placed into this tier).</summary>
        [Newtonsoft.Json.JsonProperty("processedTo", Required = Newtonsoft.Json.Required.Always)]
        public Amount ProcessedTo { get; set; }
    
        /// <summary>The processing tier that the account holder occupies.</summary>
        [Newtonsoft.Json.JsonProperty("tierNumber", Required = Newtonsoft.Json.Required.Always)]
        public int TierNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address 
    {
        /// <summary>The name of the city.
        /// &gt;Required if either houseNumberOrName, street, postalCode, or stateOrProvince are provided.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>The two-character country code of the address
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }
    
        /// <summary>The number or name of the house.</summary>
        [Newtonsoft.Json.JsonProperty("houseNumberOrName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseNumberOrName { get; set; }
    
        /// <summary>The postal code.
        /// &gt;A maximum of five (5) digits for an address in the USA, or a maximum of ten (10) characters for an address in all other countries.
        /// &gt;Required if either houseNumberOrName, street, city, or stateOrProvince are provided.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>The abbreviation of the state or province.
        /// &gt;Two (2) characters for an address in the USA or Canada, or a maximum of three (3) characters for an address in all other countries.
        /// &gt;Required for an address in the USA or Canada if either houseNumberOrName, street, city, or postalCode are provided.</summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvince", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvince { get; set; }
    
        /// <summary>The name of the street.
        /// &gt;The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
        /// &gt;Required if either houseNumberOrName, city, postalCode, or stateOrProvince are provided.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Amount 
    {
        /// <summary>The three-character [ISO currency code](https://docs.adyen.com/developers/currency-codes).</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string Currency { get; set; }
    
        /// <summary>The payable amount that can be charged for the transaction.
        /// 
        /// The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/developers/currency-codes).</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public long Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BankAccountDetail 
    {
        /// <summary>The bank account number (without separators).
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }
    
        /// <summary>The type of bank account.
        /// Only applicable to bank accounts held in the USA.
        /// The permitted values are: `checking`, `savings`.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountType { get; set; }
    
        /// <summary>The name of the bank account.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountName { get; set; }
    
        /// <summary>The unique identifier (UUID) of the Bank Account.
        /// &gt;If, during an account holder create or update request, this field is left blank (but other fields provided), a new Bank Account will be created with a procedurally-generated UUID.
        /// 
        /// &gt;If, during an account holder create request, a UUID is provided, the creation of the Bank Account will fail while the creation of the account holder will continue.
        /// 
        /// &gt;If, during an account holder update request, a UUID that is not correlated with an existing Bank Account is provided, the update of the account holder will fail.
        /// 
        /// &gt;If, during an account holder update request, a UUID that is correlated with an existing Bank Account is provided, the existing Bank Account will be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountUUID { get; set; }
    
        /// <summary>The bank identifier code.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("bankBicSwift", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankBicSwift { get; set; }
    
        /// <summary>The city in which the bank branch is located.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("bankCity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCity { get; set; }
    
        /// <summary>The bank code of the banking institution with which the bank account is registered.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCode { get; set; }
    
        /// <summary>The name of the banking institution with which the bank account is held.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("bankName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankName { get; set; }
    
        /// <summary>The branch code of the branch under which the bank account is registered. The value to be specified in this parameter depends on the country of the bank account:
        /// * United States - Routing number
        /// * United Kingdom - Sort code
        /// * Germany - Bankleitzahl
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("branchCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BranchCode { get; set; }
    
        /// <summary>The check code of the bank account.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("checkCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CheckCode { get; set; }
    
        /// <summary>The two-letter country code in which the bank account is registered.
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>The currency in which the bank account deals.
        /// &gt;The permitted currency codes are defined in ISO-4217 (e.g. 'EUR').
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        /// <summary>The international bank account number.
        /// &gt;The IBAN standard is defined in ISO-13616.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban { get; set; }
    
        /// <summary>The city of residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerCity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerCity { get; set; }
    
        /// <summary>The country code of the country of residence of the bank account owner.
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerCountryCode { get; set; }
    
        /// <summary>The date of birth of the bank account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerDateOfBirth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerDateOfBirth { get; set; }
    
        /// <summary>The house name or number of the residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerHouseNumberOrName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerHouseNumberOrName { get; set; }
    
        /// <summary>The name of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerName { get; set; }
    
        /// <summary>The country code of the country of nationality of the bank account owner.
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerNationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerNationality { get; set; }
    
        /// <summary>The postal code of the residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerPostalCode { get; set; }
    
        /// <summary>The state of residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerState { get; set; }
    
        /// <summary>The street name of the residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerStreet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerStreet { get; set; }
    
        /// <summary>If set to true, the bank account is a primary account.</summary>
        [Newtonsoft.Json.JsonProperty("primaryAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PrimaryAccount { get; set; }
    
        /// <summary>The tax ID number.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("taxId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxId { get; set; }
    
        /// <summary>The URL to be used for bank account verification.
        /// This may be generated on bank account creation.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("urlForVerification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlForVerification { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessDetails 
    {
        /// <summary>The registered name of the company (if it differs from the legal name of the company).</summary>
        [Newtonsoft.Json.JsonProperty("doingBusinessAs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DoingBusinessAs { get; set; }
    
        /// <summary>The legal name of the company.</summary>
        [Newtonsoft.Json.JsonProperty("legalBusinessName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegalBusinessName { get; set; }
    
        /// <summary>The registration number of the company.</summary>
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistrationNumber { get; set; }
    
        /// <summary>Each of the shareholders associated with the company.
        /// Each array entry should represent one shareholder.</summary>
        [Newtonsoft.Json.JsonProperty("shareholders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShareholderContact> Shareholders { get; set; }
    
        /// <summary>The tax ID of the company.</summary>
        [Newtonsoft.Json.JsonProperty("taxId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CloseAccountHolderRequest 
    {
        /// <summary>The code of the Account Holder to be closed.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CloseAccountHolderResponse 
    {
        /// <summary>The new status of the Account Holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus AccountHolderStatus { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CloseAccountRequest 
    {
        /// <summary>The code of account to be closed.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CloseAccountResponse 
    {
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>The new status of the account.
        /// &gt;Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CloseAccountResponseStatus Status { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateAccountHolderRequest 
    {
        /// <summary>The desired code of the prospective account holder.
        /// &gt; Must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are permitted.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The details of the prospective account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderDetails", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderDetails AccountHolderDetails { get; set; }
    
        /// <summary>If set to true, an account with the default options is created for this account holder.
        /// **Default Value:** true</summary>
        [Newtonsoft.Json.JsonProperty("createDefaultAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CreateDefaultAccount { get; set; }
    
        /// <summary>A description of the prospective account holder.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }
    
        /// <summary>The entity type.
        /// Permitted values: `Business`, `Individual`
        /// 
        /// If an account holder is 'Business', then `accountHolderDetails.businessDetails` must be provided, as well as at least one entry in the `accountHolderDetails.businessDetails.shareholders` list.
        /// 
        /// If an account holder is 'Individual', then `accountHolderDetails.individualDetails` must be provided.</summary>
        [Newtonsoft.Json.JsonProperty("legalEntity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateAccountHolderRequestLegalEntity LegalEntity { get; set; }
    
        /// <summary>The currency with which the prospective account holder primarily deals.</summary>
        [Newtonsoft.Json.JsonProperty("primaryCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryCurrency { get; set; }
    
        /// <summary>The starting [processing tier](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks#tiers) for the prospective account holder.</summary>
        [Newtonsoft.Json.JsonProperty("processingTier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProcessingTier { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateAccountHolderResponse 
    {
        /// <summary>The code of a new account created for the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCode { get; set; }
    
        /// <summary>The code of the new account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>Details of the new account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderDetails", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderDetails AccountHolderDetails { get; set; }
    
        /// <summary>The status of the new account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus AccountHolderStatus { get; set; }
    
        /// <summary>The description of the new account holder.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>A list of fields that caused the `/createAccountHolder` request to fail.</summary>
        [Newtonsoft.Json.JsonProperty("invalidFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorFieldType> InvalidFields { get; set; }
    
        /// <summary>The type of legal entity of the new account holder.</summary>
        [Newtonsoft.Json.JsonProperty("legalEntity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateAccountHolderResponseLegalEntity LegalEntity { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        /// <summary>The details of KYC Verification of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("verification", Required = Newtonsoft.Json.Required.Always)]
        public KYCVerificationResult Verification { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateAccountRequest 
    {
        /// <summary>The code of Account Holder under which to create the account.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>A description of the account.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }
    
        /// <summary>The payout schedule of the prospective account.
        /// &gt;Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.</summary>
        [Newtonsoft.Json.JsonProperty("payoutSchedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateAccountRequestPayoutSchedule PayoutSchedule { get; set; }
    
        /// <summary>The reason for the payout schedule choice.
        /// &gt;Required if the payoutSchedule is `HOLD`.</summary>
        [Newtonsoft.Json.JsonProperty("payoutScheduleReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PayoutScheduleReason { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateAccountResponse 
    {
        /// <summary>The code of the new account.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountCode { get; set; }
    
        /// <summary>The code of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The description of the account.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The payout schedule of the account.</summary>
        [Newtonsoft.Json.JsonProperty("payoutSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayoutScheduleResponse PayoutSchedule { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>The status of the account.
        /// &gt;Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateAccountResponseStatus Status { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeleteBankAccountRequest 
    {
        /// <summary>The code of the Account Holder from which to delete the Bank Account(s).</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The code(s) of the Bank Accounts to be deleted.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUIDs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> BankAccountUUIDs { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeleteShareholderRequest 
    {
        /// <summary>The code of the Account Holder from which to delete the Shareholders.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The code(s) of the Shareholders to be deleted.</summary>
        [Newtonsoft.Json.JsonProperty("shareholderCodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ShareholderCodes { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentDetail 
    {
        /// <summary>The code of account holder, to which the document applies.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The unique ID of the Bank Account to which the document applies.
        /// &gt;Required if the documentType is `BANK_STATEMENT` (i.e., a document is being submitted in order to verify a bank account).
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on when a document should be submitted in order to verify a bank account.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountUUID { get; set; }
    
        /// <summary>Description of the document.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The type of document.
        /// Permitted values:
        /// * `ID_CARD` denotes an image containing both the front and back of the ID card.
        /// * `ID_CARD_FRONT` denotes an image containing only the front of the ID card. In order for a document to be usable, both the `ID_CARD_FRONT` and `ID_CARD_BACK` must be submitted.
        /// * `ID_CARD_BACK` denotes an image containing only the back of the ID card. In order for a document to be usable, both the `ID_CARD_FRONT` and `ID_CARD_BACK` must be submitted.
        /// * `DRIVING_LICENCE` denotes an image containing both the front and back of the driving licence.
        /// * `DRIVING_LICENCE_FRONT` denotes an image containing only the front of the driving licence. In order for a document to be usable, both the `DRIVING_LICENCE_FRONT` and `DRIVING_LICENCE_BACK` must be submitted.
        /// * `DRIVING_LICENCE_BACK` denotes an image containing only the back of the driving licence. In order for a document to be usable, both the `DRIVING_LICENCE_FRONT` and `DRIVING_LICENCE_FRONT` must be submitted.
        /// 
        /// &gt;Please refer to [Verification checks](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks) for details on when each document type should be submitted.</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentDetailDocumentType DocumentType { get; set; }
    
        /// <summary>Filename of the document.</summary>
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Filename { get; set; }
    
        /// <summary>The code of the shareholder, to which the document applies.
        /// &gt;Required if the account holder referred to by the `accountHolderCode` has a `legalEntity` of type `Business` and the `documentType` is either `PASSPORT`, `ID_CARD`, `ID_CARD_FRONT`, `ID_CARD_BACK`, `DRIVING_LICENCE`, `DRIVING_LICENCE_FRONT`, `DRIVING_LICENCE_BACK` (i.e. a document is being submitted in order to verify a shareholder).
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on when a document should be submitted in order to verify a shareholder.</summary>
        [Newtonsoft.Json.JsonProperty("shareholderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareholderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorFieldType 
    {
        /// <summary>The validation error code.</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ErrorCode { get; set; }
    
        /// <summary>A description of the validation error.</summary>
        [Newtonsoft.Json.JsonProperty("errorDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorDescription { get; set; }
    
        /// <summary>The type of error field.</summary>
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldType FieldType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FieldType 
    {
        /// <summary>The full name of the property.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The type of the field.</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldTypeFieldName FieldName { get; set; }
    
        /// <summary>The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.</summary>
        [Newtonsoft.Json.JsonProperty("shareholderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareholderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GenericResponse 
    {
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetAccountHolderRequest 
    {
        /// <summary>The code of the account of which to retrieve the details.
        /// &gt; Required if no `accountHolderCode` is provided.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCode { get; set; }
    
        /// <summary>The code of the account holder of which to retrieve the details.
        /// &gt; Required if no `accountCode` is provided.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountHolderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetAccountHolderResponse 
    {
        /// <summary>The code of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>Details of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderDetails", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderDetails AccountHolderDetails { get; set; }
    
        /// <summary>The status of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus AccountHolderStatus { get; set; }
    
        /// <summary>A list of the accounts under the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Account> Accounts { get; set; }
    
        /// <summary>The description of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The legal entity of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("legalEntity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetAccountHolderResponseLegalEntity LegalEntity { get; set; }
    
        /// <summary>The currency with which the prospective account holder primarily deals.</summary>
        [Newtonsoft.Json.JsonProperty("primaryCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryCurrency { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        /// <summary>The details of KYC Verification of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("verification", Required = Newtonsoft.Json.Required.Always)]
        public KYCVerificationResult Verification { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetAccountHolderStatusResponse 
    {
        /// <summary>The code of the Account Holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The status of the Account Holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus AccountHolderStatus { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetUploadedDocumentsRequest 
    {
        /// <summary>The code of the Account Holder for which to retrieve the documents.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The code of the Bank Account for which to retrieve the documents.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountUUID { get; set; }
    
        /// <summary>The code of the Shareholder for which to retrieve the documents.</summary>
        [Newtonsoft.Json.JsonProperty("shareholderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareholderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetUploadedDocumentsResponse 
    {
        /// <summary>A list of the documents and their details.</summary>
        [Newtonsoft.Json.JsonProperty("documentDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocumentDetail> DocumentDetails { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IndividualDetails 
    {
        /// <summary>The name of the individual.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name Name { get; set; }
    
        /// <summary>Personal information of the individual.</summary>
        [Newtonsoft.Json.JsonProperty("personalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalData PersonalData { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KYCBankAccountCheckResult 
    {
        /// <summary>The unique ID of the bank account to which the check applies.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BankAccountUUID { get; set; }
    
        /// <summary>A list of the checks and their statuses.</summary>
        [Newtonsoft.Json.JsonProperty("checks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<KYCCheckStatusData> Checks { get; set; } = new System.Collections.ObjectModel.Collection<KYCCheckStatusData>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KYCCheckResult 
    {
        /// <summary>A list of the checks and their statuses.</summary>
        [Newtonsoft.Json.JsonProperty("checks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<KYCCheckStatusData> Checks { get; set; } = new System.Collections.ObjectModel.Collection<KYCCheckStatusData>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KYCCheckStatusData 
    {
        /// <summary>A list of the fields required for execution of the check.</summary>
        [Newtonsoft.Json.JsonProperty("requiredFields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> RequiredFields { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>The status of the check.
        /// &gt;Permitted Values: `UNCHECKED`, `DATA_PROVIDED`, `PASSED`, `PENDING`, `AWAITING_DATA`, `RETRY_LIMIT_REACHED`, `INVALID_DATA`, `FAILED`.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KYCCheckStatusDataStatus Status { get; set; }
    
        /// <summary>A summary of the execution of the check.</summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Always)]
        public KYCCheckSummary Summary { get; set; }
    
        /// <summary>The type of check.
        /// &gt;Permitted Values: `COMPANY_VERIFICATION`, `IDENTITY_VERIFICATION`, `PASSPORT_VERIFICATION`, `BANK_ACCOUNT_VERIFICATION`, `NONPROFIT_VERIFICATION`.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KYCCheckStatusDataType Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KYCCheckSummary 
    {
        /// <summary>The code of the check.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }
    
        /// <summary>A description of the check.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KYCShareholderCheckResult 
    {
        /// <summary>A list of the checks and their statuses.</summary>
        [Newtonsoft.Json.JsonProperty("checks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<KYCCheckStatusData> Checks { get; set; } = new System.Collections.ObjectModel.Collection<KYCCheckStatusData>();
    
        /// <summary>The code of the shareholder to which the check applies.</summary>
        [Newtonsoft.Json.JsonProperty("shareholderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShareholderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class KYCVerificationResult 
    {
        /// <summary>The result(s) of the checks on the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolder", Required = Newtonsoft.Json.Required.Always)]
        public KYCCheckResult AccountHolder { get; set; }
    
        /// <summary>The result(s) of the checks on the bank account(s).</summary>
        [Newtonsoft.Json.JsonProperty("bankAccounts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<KYCBankAccountCheckResult> BankAccounts { get; set; } = new System.Collections.ObjectModel.Collection<KYCBankAccountCheckResult>();
    
        /// <summary>The result(s) of the checks on the shareholder(s).</summary>
        [Newtonsoft.Json.JsonProperty("shareholders", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<KYCShareholderCheckResult> Shareholders { get; set; } = new System.Collections.ObjectModel.Collection<KYCShareholderCheckResult>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Name 
    {
        /// <summary>The first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }
    
        /// <summary>The gender.
        /// &gt;The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NameGender Gender { get; set; }
    
        /// <summary>The name's infix, if applicable.
        /// &gt;A maximum length of twenty (20) characters is imposed.</summary>
        [Newtonsoft.Json.JsonProperty("infix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Infix { get; set; }
    
        /// <summary>The last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PayoutScheduleResponse 
    {
        /// <summary>The date of the next scheduled payout.</summary>
        [Newtonsoft.Json.JsonProperty("nextScheduledPayout", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset NextScheduledPayout { get; set; }
    
        /// <summary>The payout schedule of the account.
        /// &gt;Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.</summary>
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PayoutScheduleResponseSchedule Schedule { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PersonalData 
    {
        /// <summary>The date of birth of the person.
        /// The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfBirth { get; set; }
    
        /// <summary>An ID number of the person.</summary>
        [Newtonsoft.Json.JsonProperty("idNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNumber { get; set; }
    
        /// <summary>The nationality of the person represented by a two-character country code.
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').</summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string Nationality { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PhoneNumber 
    {
        /// <summary>The two-character country code of the phone number.
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').</summary>
        [Newtonsoft.Json.JsonProperty("phoneCountryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PhoneCountryCode { get; set; }
    
        /// <summary>The phone number.
        /// &gt;The inclusion of the phone number country code is not necessary.</summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PhoneNumber1 { get; set; }
    
        /// <summary>The type of the phone number.
        /// &gt;The following values are permitted: `Landline`, `Mobile`, `SIP`, `Fax`.</summary>
        [Newtonsoft.Json.JsonProperty("phoneType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneNumberPhoneType PhoneType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShareholderContact 
    {
        /// <summary>The address of the contact.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }
    
        /// <summary>The e-mail address of the contact.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>The phone number of the contact provided as a single string.  It will be handled as a landline phone.
        /// **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"</summary>
        [Newtonsoft.Json.JsonProperty("fullPhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullPhoneNumber { get; set; }
    
        /// <summary>The name of the contact.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name Name { get; set; }
    
        /// <summary>Personal data of the contact.</summary>
        [Newtonsoft.Json.JsonProperty("personalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalData PersonalData { get; set; }
    
        /// <summary>The phone number of the contact.</summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PhoneNumber PhoneNumber { get; set; }
    
        /// <summary>The unique identifier (UUID) of the Shareholder.
        /// &gt;**If, during an Account Holder create or update request, this field is left blank (but other fields provided), a new Shareholder will be created with a procedurally-generated UUID.**
        /// 
        /// &gt;**If, during an Account Holder create request, a UUID is provided, the creation of the Shareholder will fail while the creation of the Account Holder will continue.**
        /// 
        /// &gt;**If, during an Account Holder update request, a UUID that is not correlated with an existing Shareholder is provided, the update of the Shareholder will fail.**
        /// 
        /// &gt;**If, during an Account Holder update request, a UUID that is correlated with an existing Shareholder is provided, the existing Bank Account will be updated.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareholderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareholderCode { get; set; }
    
        /// <summary>The URL of the website of the contact.</summary>
        [Newtonsoft.Json.JsonProperty("webAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebAddress { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SuspendAccountHolderRequest 
    {
        /// <summary>The code of the account holder to be suspended.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SuspendAccountHolderResponse 
    {
        /// <summary>The new status of the Account Holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus AccountHolderStatus { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnSuspendAccountHolderRequest 
    {
        /// <summary>The code of the account holder to be reinstated.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnSuspendAccountHolderResponse 
    {
        /// <summary>The new status of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus AccountHolderStatus { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateAccountHolderRequest 
    {
        /// <summary>The code of the Account Holder to be updated.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The details to which the Account Holder should be updated.
        /// 
        /// Required if a processingTier is not provided.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountHolderDetails AccountHolderDetails { get; set; }
    
        /// <summary>The description to which the Account Holder should be updated.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The primary currency to which the Account Holder should be updated.</summary>
        [Newtonsoft.Json.JsonProperty("primaryCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryCurrency { get; set; }
    
        /// <summary>The processing tier to which the Account Holder should be updated.
        /// &gt;The processing tier can not be lowered through this request.
        /// 
        /// &gt;Required if accountHolderDetails are not provided.</summary>
        [Newtonsoft.Json.JsonProperty("processingTier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProcessingTier { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateAccountHolderResponse 
    {
        /// <summary>The code of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>Details of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountHolderDetails AccountHolderDetails { get; set; }
    
        /// <summary>The new status of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderStatus", Required = Newtonsoft.Json.Required.Always)]
        public AccountHolderStatus AccountHolderStatus { get; set; }
    
        /// <summary>The description of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>in case the account holder has not been updated, contains account holder fields, that did not pass the validation.</summary>
        [Newtonsoft.Json.JsonProperty("invalidFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorFieldType> InvalidFields { get; set; }
    
        /// <summary>The legal entity of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("legalEntity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateAccountHolderResponseLegalEntity LegalEntity { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        /// <summary>A list of the fields updated through the request.</summary>
        [Newtonsoft.Json.JsonProperty("updatedFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldType> UpdatedFields { get; set; }
    
        /// <summary>The details of KYC Verification of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("verification", Required = Newtonsoft.Json.Required.Always)]
        public KYCVerificationResult Verification { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateAccountHolderStateRequest 
    {
        /// <summary>The code of the Account Holder on which to update the state.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>If true, disable the requested state.  If false, enable the requested state.</summary>
        [Newtonsoft.Json.JsonProperty("disable", Required = Newtonsoft.Json.Required.Always)]
        public bool Disable { get; set; }
    
        /// <summary>The reason that the state is being updated.
        /// &gt;Required if the state is being disabled.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        /// <summary>The state to be updated.
        /// &gt;Permitted values are: `Processing`, `Payout`</summary>
        [Newtonsoft.Json.JsonProperty("stateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateAccountHolderStateRequestStateType StateType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateAccountRequest 
    {
        /// <summary>The code of the account to update.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountCode { get; set; }
    
        /// <summary>A description of the account.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The details of the payout schedule, to which the account should be updated.</summary>
        [Newtonsoft.Json.JsonProperty("payoutSchedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdatePayoutScheduleRequest PayoutSchedule { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateAccountResponse 
    {
        /// <summary>The code of the account.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountCode { get; set; }
    
        /// <summary>The description of the account.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The payout schedule of the account.</summary>
        [Newtonsoft.Json.JsonProperty("payoutSchedule", Required = Newtonsoft.Json.Required.Always)]
        public PayoutScheduleResponse PayoutSchedule { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates whether the request is processed synchronously or asynchronously.  Depending on the request's marketplace settings, the following scenarios may be applied:
        /// * **sync:** The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
        /// * **async:** The request is queued and will be executed when the providing service is available in the order in which the requests are received.
        /// * **asyncOnError:** The processing of the request is immediately attempted, but if the providing service is unavailable, the request is scheduled in a queue.</summary>
        [Newtonsoft.Json.JsonProperty("submittedAsync", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmittedAsync { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdatePayoutScheduleRequest 
    {
        /// <summary>Direction on how to handle any payouts that have already been scheduled.
        /// Permitted values:
        /// * `CLOSE` will close the existing batch of payouts.
        /// * `UPDATE` will reschedule the existing batch to the new schedule.
        /// * `NOTHING` (**default**) will allow the payout to proceed.</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdatePayoutScheduleRequestAction Action { get; set; }
    
        /// <summary>The reason for the payout schedule update.
        /// &gt; This field is required when the `schedule` parameter is set to `HOLD`.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        /// <summary>The payout schedule to which the account is to be updated.
        /// Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.</summary>
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdatePayoutScheduleRequestSchedule Schedule { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UploadDocumentRequest 
    {
        /// <summary>The content of the document as represented by a Base64-encoded string.
        /// 
        /// Restrictions:
        /// * Maximum 2 pages.
        /// * File size must be no less than 1000 bytes and no greater than 10 MB.
        /// * File format must be either a jpeg, jpg, pdf, or png.</summary>
        [Newtonsoft.Json.JsonProperty("documentContent", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] DocumentContent { get; set; }
    
        /// <summary>Details of the document being submitted.</summary>
        [Newtonsoft.Json.JsonProperty("documentDetail", Required = Newtonsoft.Json.Required.Always)]
        public DocumentDetail DocumentDetail { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountEventEvent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"InactivateAccount")]
        InactivateAccount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RefundNotPaidOutTransfers")]
        RefundNotPaidOutTransfers = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountHolderStatusStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Suspended")]
        Suspended = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountHolderVerificationNotificationContentVerificationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AWAITING_DATA")]
        AWAITING_DATA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DATA_PROVIDED")]
        DATA_PROVIDED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATA")]
        INVALID_DATA = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSED")]
        PASSED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_REVIEW")]
        PENDING_REVIEW = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RETRY_LIMIT_REACHED")]
        RETRY_LIMIT_REACHED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNCHECKED")]
        UNCHECKED = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountHolderVerificationNotificationContentVerificationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BANK_ACCOUNT_VERIFICATION")]
        BANK_ACCOUNT_VERIFICATION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_VERIFICATION")]
        COMPANY_VERIFICATION = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_VERIFICATION")]
        IDENTITY_VERIFICATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NONPROFIT_VERIFICATION")]
        NONPROFIT_VERIFICATION = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT_VERIFICATION")]
        PASSPORT_VERIFICATION = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CloseAccountResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Suspended")]
        Suspended = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateAccountHolderRequestLegalEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Individual")]
        Individual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NonProfit")]
        NonProfit = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateAccountHolderResponseLegalEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Individual")]
        Individual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NonProfit")]
        NonProfit = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateAccountRequestPayoutSchedule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DAILY")]
        DAILY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HOLD")]
        HOLD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY")]
        MONTHLY = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WEEKLY")]
        WEEKLY = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateAccountResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Suspended")]
        Suspended = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DocumentDetailDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BANK_STATEMENT")]
        BANK_STATEMENT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BSN")]
        BSN = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENCE")]
        DRIVING_LICENCE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENCE_BACK")]
        DRIVING_LICENCE_BACK = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENCE_FRONT")]
        DRIVING_LICENCE_FRONT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID_CARD")]
        ID_CARD = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID_CARD_BACK")]
        ID_CARD_BACK = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID_CARD_FRONT")]
        ID_CARD_FRONT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NHIS")]
        NHIS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SSN")]
        SSN = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldTypeFieldName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"accountHolderCode")]
        AccountHolderCode = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountHolderDetails")]
        AccountHolderDetails = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountNumber")]
        AccountNumber = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountType")]
        AccountType = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"address")]
        Address = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankAccount")]
        BankAccount = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankBicSwift")]
        BankBicSwift = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankCity")]
        BankCity = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankCode")]
        BankCode = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankName")]
        BankName = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankStatement")]
        BankStatement = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"branchCode")]
        BranchCode = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"businessContact")]
        BusinessContact = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"checkCode")]
        CheckCode = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"city")]
        City = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"country")]
        Country = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"countryCode")]
        CountryCode = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"currencyCode")]
        CurrencyCode = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dateOfBirth")]
        DateOfBirth = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"document")]
        Document = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"drivingLicence")]
        DrivingLicence = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"drivingLicenceBack")]
        DrivingLicenceBack = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"firstName")]
        FirstName = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fullPhoneNumber")]
        FullPhoneNumber = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gender")]
        Gender = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"houseNumberOrName")]
        HouseNumberOrName = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iban")]
        Iban = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"idCard")]
        IdCard = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"idCardBack")]
        IdCardBack = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"idCardFront")]
        IdCardFront = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"idNumber")]
        IdNumber = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"identityDocument")]
        IdentityDocument = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lastName")]
        LastName = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"legalBusinessName")]
        LegalBusinessName = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"merchantCategoryCode")]
        MerchantCategoryCode = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"microDeposit")]
        MicroDeposit = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nationality")]
        Nationality = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerCity")]
        OwnerCity = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerCountryCode")]
        OwnerCountryCode = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerHouseNumberOrName")]
        OwnerHouseNumberOrName = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerName")]
        OwnerName = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerPostalCode")]
        OwnerPostalCode = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerState")]
        OwnerState = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerStreet")]
        OwnerStreet = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"passport")]
        Passport = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"personalData")]
        PersonalData = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"phoneCountryCode")]
        PhoneCountryCode = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"phoneNumber")]
        PhoneNumber = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"postalCode")]
        PostalCode = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"registrationNumber")]
        RegistrationNumber = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shareholder")]
        Shareholder = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"stateOrProvince")]
        StateOrProvince = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"street")]
        Street = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"taxId")]
        TaxId = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tierNumber")]
        TierNumber = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtualAccount")]
        VirtualAccount = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"webAddress")]
        WebAddress = 60,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GetAccountHolderResponseLegalEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Individual")]
        Individual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NonProfit")]
        NonProfit = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum KYCCheckStatusDataStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AWAITING_DATA")]
        AWAITING_DATA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DATA_PROVIDED")]
        DATA_PROVIDED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_DATA")]
        INVALID_DATA = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSED")]
        PASSED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_REVIEW")]
        PENDING_REVIEW = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RETRY_LIMIT_REACHED")]
        RETRY_LIMIT_REACHED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNCHECKED")]
        UNCHECKED = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum KYCCheckStatusDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BANK_ACCOUNT_VERIFICATION")]
        BANK_ACCOUNT_VERIFICATION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_VERIFICATION")]
        COMPANY_VERIFICATION = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTITY_VERIFICATION")]
        IDENTITY_VERIFICATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NONPROFIT_VERIFICATION")]
        NONPROFIT_VERIFICATION = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT_VERIFICATION")]
        PASSPORT_VERIFICATION = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NameGender
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PayoutScheduleResponseSchedule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DAILY")]
        DAILY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HOLD")]
        HOLD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY")]
        MONTHLY = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WEEKLY")]
        WEEKLY = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PhoneNumberPhoneType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Landline")]
        Landline = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mobile")]
        Mobile = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdateAccountHolderResponseLegalEntity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Individual")]
        Individual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NonProfit")]
        NonProfit = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdateAccountHolderStateRequestStateType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LimitedPayout")]
        LimitedPayout = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitedProcessing")]
        LimitedProcessing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitlessPayout")]
        LimitlessPayout = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LimitlessProcessing")]
        LimitlessProcessing = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Payout")]
        Payout = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdatePayoutScheduleRequestAction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSE")]
        CLOSE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOTHING")]
        NOTHING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE")]
        UPDATE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdatePayoutScheduleRequestSchedule
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DAILY")]
        DAILY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HOLD")]
        HOLD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY")]
        MONTHLY = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WEEKLY")]
        WEEKLY = 4,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108