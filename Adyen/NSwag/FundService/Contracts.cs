//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace  Adeyn.MarketPay.FundService
{
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountDetailBalance 
    {
        /// <summary>The code of the account that holds the balance.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCode { get; set; }
    
        /// <summary>Details of the balance held by the account.</summary>
        [Newtonsoft.Json.JsonProperty("detailBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DetailBalance DetailBalance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderBalanceRequest 
    {
        /// <summary>The code of the Account Holder of which to retrieve the balance.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderBalanceResponse 
    {
        /// <summary>A list of each account and their balances.</summary>
        [Newtonsoft.Json.JsonProperty("balancePerAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountDetailBalance> BalancePerAccount { get; set; }
    
        /// <summary>Contains field validation errors that would prevent requests from being processed.</summary>
        [Newtonsoft.Json.JsonProperty("invalidFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorFieldType> InvalidFields { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>The result code.</summary>
        [Newtonsoft.Json.JsonProperty("resultCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultCode { get; set; }
    
        /// <summary>The total balance of the account holder.</summary>
        [Newtonsoft.Json.JsonProperty("totalBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DetailBalance TotalBalance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderTransactionListRequest 
    {
        /// <summary>The code of the account holder that owns the account(s) of which retrieve the transaction list.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>A list of accounts to include in the transaction list. If left blank, the last fifty (50) transactions for all accounts of the account holder will be included.</summary>
        [Newtonsoft.Json.JsonProperty("transactionListsPerAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionListForAccount> TransactionListsPerAccount { get; set; }
    
        /// <summary>A list of statuses to include in the transaction list. If left blank, all transactions will be included.
        /// &gt;Permitted values:
        /// &gt;* `PendingCredit` - a pending balance credit.
        /// &gt;* `CreditFailed` - a pending credit failure; the balance will not be credited.
        /// &gt;* `Credited` - a credited balance.
        /// &gt;* `PendingDebit` - a pending balance debit (e.g., a refund).
        /// &gt;* `DebitFailed` - a pending debit failure; the balance will not be debited.
        /// &gt;* `Debited` - a debited balance (e.g., a refund).
        /// &gt;* `DebitReversedReceived` - a pending refund reversal.
        /// &gt;* `DebitedReversed` - a reversed refund.
        /// &gt;* `ChargebackReceived` - a received chargeback request.
        /// &gt;* `Chargeback` - a processed chargeback.
        /// &gt;* `ChargebackReversedReceived` - a pending chargeback reversal.
        /// &gt;* `ChargebackReversed` - a reversed chargeback.
        /// &gt;* `Converted` - converted.
        /// &gt;* `ManualCorrected` - manual booking/adjustment by Adyen.
        /// &gt;* `Payout` - a payout.
        /// &gt;* `PayoutReversed` - a reversed payout.
        /// &gt;* `PendingFundTransfer` - a pending transfer of funds from one account to another.
        /// &gt;* `FundTransfer` - a transfer of funds from one account to another.</summary>
        [Newtonsoft.Json.JsonProperty("transactionStatuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<TransactionStatuses> TransactionStatuses { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountHolderTransactionListResponse 
    {
        /// <summary>A list of the transactions.</summary>
        [Newtonsoft.Json.JsonProperty("accountTransactionLists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccountTransactionList> AccountTransactionLists { get; set; }
    
        /// <summary>Contains field validation errors that would prevent requests from being processed.</summary>
        [Newtonsoft.Json.JsonProperty("invalidFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorFieldType> InvalidFields { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>The result code.</summary>
        [Newtonsoft.Json.JsonProperty("resultCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountTransactionList 
    {
        /// <summary>The code of the account.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCode { get; set; }
    
        /// <summary>Indicates whether there is a next page of transactions available.</summary>
        [Newtonsoft.Json.JsonProperty("hasNextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasNextPage { get; set; }
    
        /// <summary>The list of transactions.</summary>
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transaction> Transactions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Amount 
    {
        /// <summary>The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes).</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string Currency { get; set; }
    
        /// <summary>The payable amount that can be charged for the transaction.
        /// 
        /// The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/developers/development-resources/currency-codes).</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public long Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BankAccountDetail 
    {
        /// <summary>The bank account number (without separators).
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }
    
        /// <summary>The type of bank account.
        /// Only applicable to bank accounts held in the USA.
        /// The permitted values are: `checking`, `savings`.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountType { get; set; }
    
        /// <summary>The name of the bank account.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountName { get; set; }
    
        /// <summary>Merchant reference to the bank account.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountReference { get; set; }
    
        /// <summary>The unique identifier (UUID) of the Bank Account.
        /// &gt;If, during an account holder create or update request, this field is left blank (but other fields provided), a new Bank Account will be created with a procedurally-generated UUID.
        /// 
        /// &gt;If, during an account holder create request, a UUID is provided, the creation of the Bank Account will fail while the creation of the account holder will continue.
        /// 
        /// &gt;If, during an account holder update request, a UUID that is not correlated with an existing Bank Account is provided, the update of the account holder will fail.
        /// 
        /// &gt;If, during an account holder update request, a UUID that is correlated with an existing Bank Account is provided, the existing Bank Account will be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountUUID { get; set; }
    
        /// <summary>The bank identifier code.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("bankBicSwift", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankBicSwift { get; set; }
    
        /// <summary>The city in which the bank branch is located.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("bankCity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCity { get; set; }
    
        /// <summary>The bank code of the banking institution with which the bank account is registered.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("bankCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCode { get; set; }
    
        /// <summary>The name of the banking institution with which the bank account is held.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("bankName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankName { get; set; }
    
        /// <summary>The branch code of the branch under which the bank account is registered. The value to be specified in this parameter depends on the country of the bank account:
        /// * United States - Routing number
        /// * United Kingdom - Sort code
        /// * Germany - Bankleitzahl
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("branchCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BranchCode { get; set; }
    
        /// <summary>The check code of the bank account.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("checkCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CheckCode { get; set; }
    
        /// <summary>The two-letter country code in which the bank account is registered.
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>The currency in which the bank account deals.
        /// &gt;The permitted currency codes are defined in ISO-4217 (e.g. 'EUR').
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        /// <summary>The international bank account number.
        /// &gt;The IBAN standard is defined in ISO-13616.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban { get; set; }
    
        /// <summary>The city of residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerCity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerCity { get; set; }
    
        /// <summary>The country code of the country of residence of the bank account owner.
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerCountryCode { get; set; }
    
        /// <summary>The date of birth of the bank account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerDateOfBirth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerDateOfBirth { get; set; }
    
        /// <summary>The house name or number of the residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerHouseNumberOrName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerHouseNumberOrName { get; set; }
    
        /// <summary>The name of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerName { get; set; }
    
        /// <summary>The country code of the country of nationality of the bank account owner.
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerNationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerNationality { get; set; }
    
        /// <summary>The postal code of the residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerPostalCode { get; set; }
    
        /// <summary>The state of residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerState { get; set; }
    
        /// <summary>The street name of the residence of the bank account owner.
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("ownerStreet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerStreet { get; set; }
    
        /// <summary>If set to true, the bank account is a primary account.</summary>
        [Newtonsoft.Json.JsonProperty("primaryAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PrimaryAccount { get; set; }
    
        /// <summary>The tax ID number.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("taxId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxId { get; set; }
    
        /// <summary>The URL to be used for bank account verification.
        /// This may be generated on bank account creation.
        /// 
        /// &gt;Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.</summary>
        [Newtonsoft.Json.JsonProperty("urlForVerification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlForVerification { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DetailBalance 
    {
        /// <summary>The list of balances held by the account.</summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Amount> Balance { get; set; }
    
        /// <summary>The list of on hold balances held by the account.</summary>
        [Newtonsoft.Json.JsonProperty("onHoldBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Amount> OnHoldBalance { get; set; }
    
        /// <summary>The list of pending balances held by the account.</summary>
        [Newtonsoft.Json.JsonProperty("pendingBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Amount> PendingBalance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorFieldType 
    {
        /// <summary>The validation error code.</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ErrorCode { get; set; }
    
        /// <summary>A description of the validation error.</summary>
        [Newtonsoft.Json.JsonProperty("errorDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorDescription { get; set; }
    
        /// <summary>The type of error field.</summary>
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldType FieldType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FieldType 
    {
        /// <summary>The full name of the property.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The type of the field.</summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldTypeFieldName FieldName { get; set; }
    
        /// <summary>The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.</summary>
        [Newtonsoft.Json.JsonProperty("shareholderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareholderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PayoutAccountHolderRequest 
    {
        /// <summary>The code of the account from which the payout is to be made.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountCode { get; set; }
    
        /// <summary>The code of the Account Holder who owns the account from which the payout is to be made.
        /// The Account Holder is the party to which the payout will be made.</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        /// <summary>The amount to pay out.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public Amount Amount { get; set; }
    
        /// <summary>The unique ID of the Bank Account held by the Account Holder to which the payout is to be made.
        /// If left blank, a bank account is automatically selected.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountUUID { get; set; }
    
        /// <summary>A description of the payout.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.</summary>
        [Newtonsoft.Json.JsonProperty("merchantReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReference { get; set; }
    
        /// <summary>The unique ID of the payout instrument token held by the Account Holder to which the payout is to be made.
        /// If left blank, a payout instrument is automatically selected.</summary>
        [Newtonsoft.Json.JsonProperty("payoutInstrumentTokenCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayoutInstrumentTokenCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PayoutAccountHolderResponse 
    {
        /// <summary>The unique ID of the Bank Account to which the payout was made.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountUUID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BankAccountUUID { get; set; }
    
        /// <summary>Contains field validation errors that would prevent requests from being processed.</summary>
        [Newtonsoft.Json.JsonProperty("invalidFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorFieldType> InvalidFields { get; set; }
    
        /// <summary>The value supplied by the executing user when initiating the transfer; may be used to link multiple transactions.</summary>
        [Newtonsoft.Json.JsonProperty("merchantReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReference { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>The result code.</summary>
        [Newtonsoft.Json.JsonProperty("resultCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RefundNotPaidOutTransfersRequest 
    {
        /// <summary>The code of the account from which to perform the refund(s).</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountCode { get; set; }
    
        /// <summary>The code of the Account Holder which owns the account from which to perform the refund(s).</summary>
        [Newtonsoft.Json.JsonProperty("accountHolderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountHolderCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RefundNotPaidOutTransfersResponse 
    {
        /// <summary>Contains field validation errors that would prevent requests from being processed.</summary>
        [Newtonsoft.Json.JsonProperty("invalidFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorFieldType> InvalidFields { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>The result code.</summary>
        [Newtonsoft.Json.JsonProperty("resultCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupBeneficiaryRequest 
    {
        /// <summary>The destination account code.</summary>
        [Newtonsoft.Json.JsonProperty("destinationAccountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationAccountCode { get; set; }
    
        /// <summary>A value that can be supplied at the discretion of the executing user.</summary>
        [Newtonsoft.Json.JsonProperty("merchantReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantReference { get; set; }
    
        /// <summary>The benefactor account.</summary>
        [Newtonsoft.Json.JsonProperty("sourceAccountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceAccountCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SetupBeneficiaryResponse 
    {
        /// <summary>Contains field validation errors that would prevent requests from being processed.</summary>
        [Newtonsoft.Json.JsonProperty("invalidFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorFieldType> InvalidFields { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>The result code.</summary>
        [Newtonsoft.Json.JsonProperty("resultCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transaction 
    {
        /// <summary>The amount of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }
    
        /// <summary>The details of the bank account to where a payout was made.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BankAccountDetail BankAccountDetail { get; set; }
    
        /// <summary>The merchant reference of a related capture.</summary>
        [Newtonsoft.Json.JsonProperty("captureMerchantReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptureMerchantReference { get; set; }
    
        /// <summary>The psp reference of a related capture.</summary>
        [Newtonsoft.Json.JsonProperty("capturePspReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CapturePspReference { get; set; }
    
        /// <summary>The date on which the transaction was performed.</summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreationDate { get; set; }
    
        /// <summary>A description of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The code of the account to which funds were credited during an outgoing fund transfer.</summary>
        [Newtonsoft.Json.JsonProperty("destinationAccountCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationAccountCode { get; set; }
    
        /// <summary>The psp reference of the related dispute.</summary>
        [Newtonsoft.Json.JsonProperty("disputePspReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisputePspReference { get; set; }
    
        /// <summary>The reason code of a dispute.</summary>
        [Newtonsoft.Json.JsonProperty("disputeReasonCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisputeReasonCode { get; set; }
    
        /// <summary>The merchant reference of a transaction.</summary>
        [Newtonsoft.Json.JsonProperty("merchantReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReference { get; set; }
    
        /// <summary>The psp reference of the related authorisation or transfer.</summary>
        [Newtonsoft.Json.JsonProperty("paymentPspReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentPspReference { get; set; }
    
        /// <summary>The psp reference of the related payout.</summary>
        [Newtonsoft.Json.JsonProperty("payoutPspReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PayoutPspReference { get; set; }
    
        /// <summary>The psp reference of a transaction.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PspReference { get; set; }
    
        /// <summary>The code of the account from which funds were debited during an incoming fund transfer.</summary>
        [Newtonsoft.Json.JsonProperty("sourceAccountCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceAccountCode { get; set; }
    
        /// <summary>The status of the transaction.
        /// &gt;Permitted values: `PendingCredit`, `CreditFailed`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.</summary>
        [Newtonsoft.Json.JsonProperty("transactionStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionStatus TransactionStatus { get; set; }
    
        /// <summary>The transfer code of the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("transferCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TransactionListForAccount 
    {
        /// <summary>The account for which to retrieve the transactions.</summary>
        [Newtonsoft.Json.JsonProperty("accountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountCode { get; set; }
    
        /// <summary>The page of transactions to retrieve.
        /// Each page lists fifty (50) transactions.  The most recent transactions are included on page 1.</summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.Always)]
        public int Page { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TransferFundsRequest 
    {
        /// <summary>The amount to be transferred.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public Amount Amount { get; set; }
    
        /// <summary>The code of the account to which the funds are to be credited.
        /// &gt;The state of the Account Holder of this account must be Active.</summary>
        [Newtonsoft.Json.JsonProperty("destinationAccountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationAccountCode { get; set; }
    
        /// <summary>A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.</summary>
        [Newtonsoft.Json.JsonProperty("merchantReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReference { get; set; }
    
        /// <summary>The code of the account from which the funds are to be debited.
        /// &gt;The state of the Account Holder of this account must be Active and allow payouts.</summary>
        [Newtonsoft.Json.JsonProperty("sourceAccountCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceAccountCode { get; set; }
    
        /// <summary>The code related to the type of transfer being performed.
        /// &gt;The permitted codes differ for each platform account and are defined in their service level agreement.</summary>
        [Newtonsoft.Json.JsonProperty("transferCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransferCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TransferFundsResponse 
    {
        /// <summary>Contains field validation errors that would prevent requests from being processed.</summary>
        [Newtonsoft.Json.JsonProperty("invalidFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorFieldType> InvalidFields { get; set; }
    
        /// <summary>The value supplied by the executing user when initiating the transfer; may be used to link multiple transactions.</summary>
        [Newtonsoft.Json.JsonProperty("merchantReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReference { get; set; }
    
        /// <summary>The reference of a request.  Can be used to uniquely identify the request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        /// <summary>The result code.</summary>
        [Newtonsoft.Json.JsonProperty("resultCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TransactionStatuses
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Chargeback")]
        Chargeback = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChargebackReceived")]
        ChargebackReceived = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChargebackReversed")]
        ChargebackReversed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChargebackReversedReceived")]
        ChargebackReversedReceived = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Converted")]
        Converted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CreditFailed")]
        CreditFailed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Credited")]
        Credited = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DebitFailed")]
        DebitFailed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DebitReversedReceived")]
        DebitReversedReceived = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Debited")]
        Debited = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DebitedReversed")]
        DebitedReversed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FundTransfer")]
        FundTransfer = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ManualCorrected")]
        ManualCorrected = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Payout")]
        Payout = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PayoutReversed")]
        PayoutReversed = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingCredit")]
        PendingCredit = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingDebit")]
        PendingDebit = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingFundTransfer")]
        PendingFundTransfer = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecondChargeback")]
        SecondChargeback = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecondChargebackReceived")]
        SecondChargebackReceived = 19,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldTypeFieldName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"accountCode")]
        AccountCode = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountHolderCode")]
        AccountHolderCode = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountHolderDetails")]
        AccountHolderDetails = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountNumber")]
        AccountNumber = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountStateType")]
        AccountStateType = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountStatus")]
        AccountStatus = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"accountType")]
        AccountType = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"address")]
        Address = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankAccount")]
        BankAccount = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankAccountCode")]
        BankAccountCode = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankAccountName")]
        BankAccountName = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankBicSwift")]
        BankBicSwift = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankCity")]
        BankCity = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankCode")]
        BankCode = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankName")]
        BankName = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankStatement")]
        BankStatement = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"branchCode")]
        BranchCode = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"businessContact")]
        BusinessContact = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cardToken")]
        CardToken = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"checkCode")]
        CheckCode = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"city")]
        City = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"country")]
        Country = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"countryCode")]
        CountryCode = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"currency")]
        Currency = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"currencyCode")]
        CurrencyCode = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dateOfBirth")]
        DateOfBirth = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"destinationAccountCode")]
        DestinationAccountCode = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"document")]
        Document = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"documentExpirationDate")]
        DocumentExpirationDate = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"documentIssuerCountry")]
        DocumentIssuerCountry = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"documentIssuerState")]
        DocumentIssuerState = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"documentName")]
        DocumentName = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"documentNumber")]
        DocumentNumber = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"documentType")]
        DocumentType = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"doingBusinessAs")]
        DoingBusinessAs = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"drivingLicence")]
        DrivingLicence = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"drivingLicenceBack")]
        DrivingLicenceBack = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"drivingLicense")]
        DrivingLicense = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"firstName")]
        FirstName = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fullPhoneNumber")]
        FullPhoneNumber = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gender")]
        Gender = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"houseNumberOrName")]
        HouseNumberOrName = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"iban")]
        Iban = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"idCard")]
        IdCard = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"idCardBack")]
        IdCardBack = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"idCardFront")]
        IdCardFront = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"idNumber")]
        IdNumber = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"identityDocument")]
        IdentityDocument = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"individualDetails")]
        IndividualDetails = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lastName")]
        LastName = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"legalBusinessName")]
        LegalBusinessName = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"legalEntity")]
        LegalEntity = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"legalEntityType")]
        LegalEntityType = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"merchantCategoryCode")]
        MerchantCategoryCode = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"merchantReference")]
        MerchantReference = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"microDeposit")]
        MicroDeposit = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nationality")]
        Nationality = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerCity")]
        OwnerCity = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerCountryCode")]
        OwnerCountryCode = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerHouseNumberOrName")]
        OwnerHouseNumberOrName = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerName")]
        OwnerName = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerPostalCode")]
        OwnerPostalCode = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerState")]
        OwnerState = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ownerStreet")]
        OwnerStreet = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"passport")]
        Passport = 67,
    
        [System.Runtime.Serialization.EnumMember(Value = @"passportNumber")]
        PassportNumber = 68,
    
        [System.Runtime.Serialization.EnumMember(Value = @"personalData")]
        PersonalData = 69,
    
        [System.Runtime.Serialization.EnumMember(Value = @"phoneCountryCode")]
        PhoneCountryCode = 70,
    
        [System.Runtime.Serialization.EnumMember(Value = @"phoneNumber")]
        PhoneNumber = 71,
    
        [System.Runtime.Serialization.EnumMember(Value = @"postalCode")]
        PostalCode = 72,
    
        [System.Runtime.Serialization.EnumMember(Value = @"primaryCurrency")]
        PrimaryCurrency = 73,
    
        [System.Runtime.Serialization.EnumMember(Value = @"reason")]
        Reason = 74,
    
        [System.Runtime.Serialization.EnumMember(Value = @"registrationNumber")]
        RegistrationNumber = 75,
    
        [System.Runtime.Serialization.EnumMember(Value = @"schedule")]
        Schedule = 76,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shareholder")]
        Shareholder = 77,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shareholderCode")]
        ShareholderCode = 78,
    
        [System.Runtime.Serialization.EnumMember(Value = @"socialSecurityNumber")]
        SocialSecurityNumber = 79,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sourceAccountCode")]
        SourceAccountCode = 80,
    
        [System.Runtime.Serialization.EnumMember(Value = @"stateOrProvince")]
        StateOrProvince = 81,
    
        [System.Runtime.Serialization.EnumMember(Value = @"street")]
        Street = 82,
    
        [System.Runtime.Serialization.EnumMember(Value = @"taxId")]
        TaxId = 83,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tierNumber")]
        TierNumber = 84,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transferCode")]
        TransferCode = 85,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 86,
    
        [System.Runtime.Serialization.EnumMember(Value = @"value")]
        Value = 87,
    
        [System.Runtime.Serialization.EnumMember(Value = @"virtualAccount")]
        VirtualAccount = 88,
    
        [System.Runtime.Serialization.EnumMember(Value = @"visaNumber")]
        VisaNumber = 89,
    
        [System.Runtime.Serialization.EnumMember(Value = @"webAddress")]
        WebAddress = 90,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TransactionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Chargeback")]
        Chargeback = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChargebackReceived")]
        ChargebackReceived = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChargebackReversed")]
        ChargebackReversed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChargebackReversedReceived")]
        ChargebackReversedReceived = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Converted")]
        Converted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CreditFailed")]
        CreditFailed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Credited")]
        Credited = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DebitFailed")]
        DebitFailed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DebitReversedReceived")]
        DebitReversedReceived = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Debited")]
        Debited = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DebitedReversed")]
        DebitedReversed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FundTransfer")]
        FundTransfer = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ManualCorrected")]
        ManualCorrected = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Payout")]
        Payout = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PayoutReversed")]
        PayoutReversed = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingCredit")]
        PendingCredit = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingDebit")]
        PendingDebit = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingFundTransfer")]
        PendingFundTransfer = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecondChargeback")]
        SecondChargeback = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecondChargebackReceived")]
        SecondChargebackReceived = 19,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108