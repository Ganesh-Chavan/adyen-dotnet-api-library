//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace  Adyen.PaymentService
{
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountInfo 
    {
        /// <summary>Indicator of how long this shopper account exists in the merchant's environment.
        /// Allowed values:
        /// * notApplicable
        /// * thisTransaction
        /// * lessThan30Days
        /// * from30To60Days
        /// * moreThan60Days</summary>
        [Newtonsoft.Json.JsonProperty("accountAgeIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountInfoAccountAgeIndicator AccountAgeIndicator { get; set; }
    
        /// <summary>Date when the shopper's account was last changed.</summary>
        [Newtonsoft.Json.JsonProperty("accountChangeDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AccountChangeDate { get; set; }
    
        /// <summary>Indicator when the shopper's account was last changed.
        /// Allowed values:
        /// * thisTransaction
        /// * lessThan30Days
        /// * from30To60Days
        /// * moreThan60Days</summary>
        [Newtonsoft.Json.JsonProperty("accountChangeIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountInfoAccountChangeIndicator AccountChangeIndicator { get; set; }
    
        /// <summary>Date when the shopper's account was created.</summary>
        [Newtonsoft.Json.JsonProperty("accountCreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AccountCreationDate { get; set; }
    
        /// <summary>Number of attempts the shopper tried to add a card to their account in the last day.</summary>
        [Newtonsoft.Json.JsonProperty("addCardAttemptsDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AddCardAttemptsDay { get; set; }
    
        /// <summary>Date the selected delivery address was last used.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddressUsageDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeliveryAddressUsageDate { get; set; }
    
        /// <summary>Indicator for when this delivery address was last used.
        /// Allowed values:
        /// * thisTransaction
        /// * lessThan30Days
        /// * from30To60Days
        /// * moreThan60Days</summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddressUsageIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountInfoDeliveryAddressUsageIndicator DeliveryAddressUsageIndicator { get; set; }
    
        /// <summary>Shopper's home phone number (including the country code).</summary>
        [Newtonsoft.Json.JsonProperty("homePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomePhone { get; set; }
    
        /// <summary>Shopper's mobile phone number (including the country code).</summary>
        [Newtonsoft.Json.JsonProperty("mobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobilePhone { get; set; }
    
        /// <summary>Date when the shopper has changed their password.</summary>
        [Newtonsoft.Json.JsonProperty("passwordChangeDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PasswordChangeDate { get; set; }
    
        /// <summary>Indicator when the shopper has changed their password.
        /// Allowed values:
        /// * notApplicable
        /// * thisTransaction
        /// * lessThan30Days
        /// * from30To60Days
        /// * moreThan60Days</summary>
        [Newtonsoft.Json.JsonProperty("passwordChangeIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountInfoPasswordChangeIndicator PasswordChangeIndicator { get; set; }
    
        /// <summary>Number of transactions of this shopper in the past 24 hours.</summary>
        [Newtonsoft.Json.JsonProperty("pastTransactionsDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PastTransactionsDay { get; set; }
    
        /// <summary>Number of transactions of this shopper in the past year.</summary>
        [Newtonsoft.Json.JsonProperty("pastTransactionsYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PastTransactionsYear { get; set; }
    
        /// <summary>Date this payment method was added to the shopper's account.</summary>
        [Newtonsoft.Json.JsonProperty("paymentAccountAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PaymentAccountAge { get; set; }
    
        /// <summary>Indicator for the amount of time this payment method was enrolled with this account.
        /// Allowed values:
        /// * notApplicable
        /// * thisTransaction
        /// * lessThan30Days
        /// * from30To60Days
        /// * moreThan60Days</summary>
        [Newtonsoft.Json.JsonProperty("paymentAccountIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountInfoPaymentAccountIndicator PaymentAccountIndicator { get; set; }
    
        /// <summary>Number of purchases in the last 6 months.</summary>
        [Newtonsoft.Json.JsonProperty("purchasesLast6Months", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PurchasesLast6Months { get; set; }
    
        /// <summary>Whether suspicious activity was recorded on this account.</summary>
        [Newtonsoft.Json.JsonProperty("suspiciousActivity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SuspiciousActivity { get; set; }
    
        /// <summary>Shopper's work phone number (including the country code).</summary>
        [Newtonsoft.Json.JsonProperty("workPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkPhone { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address 
    {
        /// <summary>The name of the city.
        /// &gt;Required if either houseNumberOrName, street, postalCode, or stateOrProvince are provided.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>The two-character country code of the address
        /// &gt;The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }
    
        /// <summary>The number or name of the house.</summary>
        [Newtonsoft.Json.JsonProperty("houseNumberOrName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseNumberOrName { get; set; }
    
        /// <summary>The postal code.
        /// &gt;A maximum of five (5) digits for an address in the USA, or a maximum of ten (10) characters for an address in all other countries.
        /// &gt;Required if either houseNumberOrName, street, city, or stateOrProvince are provided.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>The abbreviation of the state or province.
        /// &gt;Two (2) characters for an address in the USA or Canada, or a maximum of three (3) characters for an address in all other countries.
        /// &gt;Required for an address in the USA or Canada if either houseNumberOrName, street, city, or postalCode are provided.</summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvince", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateOrProvince { get; set; }
    
        /// <summary>The name of the street.
        /// &gt;The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
        /// &gt;Required if either houseNumberOrName, city, postalCode, or stateOrProvince are provided.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Amount 
    {
        /// <summary>The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes).</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string Currency { get; set; }
    
        /// <summary>The payable amount that can be charged for the transaction.
        /// 
        /// The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/developers/development-resources/currency-codes).</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public long Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BankAccount 
    {
        /// <summary>The bank account number (without separators).</summary>
        [Newtonsoft.Json.JsonProperty("bankAccountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountNumber { get; set; }
    
        /// <summary>The bank city.</summary>
        [Newtonsoft.Json.JsonProperty("bankCity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankCity { get; set; }
    
        /// <summary>The location id of the bank. The field value is `nil` in most cases.</summary>
        [Newtonsoft.Json.JsonProperty("bankLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankLocationId { get; set; }
    
        /// <summary>The name of the bank.</summary>
        [Newtonsoft.Json.JsonProperty("bankName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankName { get; set; }
    
        /// <summary>The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.</summary>
        [Newtonsoft.Json.JsonProperty("bic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bic { get; set; }
    
        /// <summary>Country code where the bank is located.
        /// 
        /// A valid value is an ISO two-character country code (e.g. 'NL').</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).</summary>
        [Newtonsoft.Json.JsonProperty("iban", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iban { get; set; }
    
        /// <summary>The name of the bank account holder.
        /// If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:
        /// * χ12 is converted to ch12.
        /// * üA is converted to euA.
        /// * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.
        /// After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:
        /// * John17 - allowed.
        /// * J17 - allowed.
        /// * 171 - not allowed.
        /// * John-7 - allowed.
        /// &gt; If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.</summary>
        [Newtonsoft.Json.JsonProperty("ownerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerName { get; set; }
    
        /// <summary>The bank account holder's tax ID.</summary>
        [Newtonsoft.Json.JsonProperty("taxId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BrowserInfo 
    {
        /// <summary>The accept header value of the shopper's browser.</summary>
        [Newtonsoft.Json.JsonProperty("acceptHeader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 10)]
        public string AcceptHeader { get; set; }
    
        /// <summary>The color depth of the shopper's device in bits per pixel. Should be obtained by using the browser's screen.colorDepth property.</summary>
        [Newtonsoft.Json.JsonProperty("colorDepth", Required = Newtonsoft.Json.Required.Always)]
        public int ColorDepth { get; set; }
    
        /// <summary>Boolean value indicating if the shopper's browser is able to execute Java.</summary>
        [Newtonsoft.Json.JsonProperty("javaEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool JavaEnabled { get; set; }
    
        /// <summary>The navigator.language value of the shopper's browser (as defined in IETF BCP 47).</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; set; }
    
        /// <summary>The total height of the shopper's device screen in pixels.</summary>
        [Newtonsoft.Json.JsonProperty("screenHeight", Required = Newtonsoft.Json.Required.Always)]
        public int ScreenHeight { get; set; }
    
        /// <summary>The total width of the shopper's device screen in pixels.</summary>
        [Newtonsoft.Json.JsonProperty("screenWidth", Required = Newtonsoft.Json.Required.Always)]
        public int ScreenWidth { get; set; }
    
        /// <summary>Time difference between UTC time and the shopper's browser local time, in minutes.</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneOffset", Required = Newtonsoft.Json.Required.Always)]
        public int TimeZoneOffset { get; set; }
    
        /// <summary>The user agent value of the shopper's browser.</summary>
        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 10)]
        public string UserAgent { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Card 
    {
        /// <summary>The [card verification code](https://docs.adyen.com/developers/payment-glossary#cardsecuritycodecvccvvcid) (1-20 characters). Depending on the card brand, it is known also as:
        /// * CVV2/CVC2 – length: 3 digits
        /// * CID – length: 4 digits
        /// &gt; If you are using [Client-Side Encryption](https://docs.adyen.com/developers/features/client-side-encryption), the CVC code is present in the encrypted data. You must never post the card details to the server.
        /// &gt; This field must be always present in a [one-click payment request](https://docs.adyen.com/developers/classic-integration/recurring-payments).
        /// &gt; When this value is returned in a response, it is always empty because it is not stored.</summary>
        [Newtonsoft.Json.JsonProperty("cvc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string Cvc { get; set; }
    
        /// <summary>The card expiry month.
        /// Format: 2 digits, zero-padded for single digits. For example:
        /// * 03 = March
        /// * 11 = November</summary>
        [Newtonsoft.Json.JsonProperty("expiryMonth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string ExpiryMonth { get; set; }
    
        /// <summary>The card expiry year.
        /// Format: 4 digits. For example: 2020</summary>
        [Newtonsoft.Json.JsonProperty("expiryYear", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        public string ExpiryYear { get; set; }
    
        /// <summary>The name of the cardholder, as printed on the card.</summary>
        [Newtonsoft.Json.JsonProperty("holderName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string HolderName { get; set; }
    
        /// <summary>The issue number of the card (for some UK debit cards only).</summary>
        [Newtonsoft.Json.JsonProperty("issueNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string IssueNumber { get; set; }
    
        /// <summary>The card number (4-19 characters). Do not use any separators.
        /// When this value is returned in a response, only the last 4 digits of the card number are returned.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(19, MinimumLength = 4)]
        public string Number { get; set; }
    
        /// <summary>The month component of the start date (for some UK debit cards only).</summary>
        [Newtonsoft.Json.JsonProperty("startMonth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string StartMonth { get; set; }
    
        /// <summary>The year component of the start date (for some UK debit cards only).</summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        public string StartYear { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceRenderOptions 
    {
        /// <summary>Supported SDK interface types.</summary>
        [Newtonsoft.Json.JsonProperty("sdkInterface", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceRenderOptionsSdkInterface SdkInterface { get; set; }
    
        /// <summary>UI types supported for displaying specific challenges.</summary>
        [Newtonsoft.Json.JsonProperty("sdkUiType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<SdkUiType> SdkUiType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ForexQuote 
    {
        /// <summary>The account name.</summary>
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account { get; set; }
    
        /// <summary>The account type.</summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountType { get; set; }
    
        /// <summary>The base amount.</summary>
        [Newtonsoft.Json.JsonProperty("baseAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount BaseAmount { get; set; }
    
        /// <summary>The base points.</summary>
        [Newtonsoft.Json.JsonProperty("basePoints", Required = Newtonsoft.Json.Required.Always)]
        public int BasePoints { get; set; }
    
        /// <summary>The buy rate.</summary>
        [Newtonsoft.Json.JsonProperty("buy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Buy { get; set; }
    
        /// <summary>The interbank amount.</summary>
        [Newtonsoft.Json.JsonProperty("interbank", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Interbank { get; set; }
    
        /// <summary>The reference assigned to the forex quote request.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>The sell rate.</summary>
        [Newtonsoft.Json.JsonProperty("sell", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Sell { get; set; }
    
        /// <summary>The signature to validate the integrity.</summary>
        [Newtonsoft.Json.JsonProperty("signature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature { get; set; }
    
        /// <summary>The source of the forex quote.</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        /// <summary>The type of forex.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>The date until which the forex quote is valid.</summary>
        [Newtonsoft.Json.JsonProperty("validTill", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ValidTill { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FraudCheckResult 
    {
        /// <summary>The fraud score generated by the risk check.</summary>
        [Newtonsoft.Json.JsonProperty("accountScore", Required = Newtonsoft.Json.Required.Always)]
        public int AccountScore { get; set; }
    
        /// <summary>The ID of the risk check.</summary>
        [Newtonsoft.Json.JsonProperty("checkId", Required = Newtonsoft.Json.Required.Always)]
        public int CheckId { get; set; }
    
        /// <summary>The name of the risk check.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FraudResult 
    {
        /// <summary>The total fraud score generated by the risk checks.</summary>
        [Newtonsoft.Json.JsonProperty("accountScore", Required = Newtonsoft.Json.Required.Always)]
        public int AccountScore { get; set; }
    
        /// <summary>The result of the individual risk checks.</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FraudCheckResult> Results { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Installments 
    {
        /// <summary>Defines the number of installments. Its value needs to be greater than zero.
        /// 
        /// Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public int Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantRiskIndicator 
    {
        /// <summary>Whether the chosen delivery address is identical to the billing address.</summary>
        [Newtonsoft.Json.JsonProperty("addressMatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AddressMatch { get; set; }
    
        /// <summary>Indicator regarding the delivery address.
        /// Allowed values:
        /// * `shipToBillingAddress`
        /// * `shipToVerifiedAddress`
        /// * `shipToNewAddress`
        /// * `shipToStore`
        /// * `digitalGoods`
        /// * `goodsNotShipped`
        /// * `other`</summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddressIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MerchantRiskIndicatorDeliveryAddressIndicator DeliveryAddressIndicator { get; set; }
    
        /// <summary>The delivery email address (for digital goods).</summary>
        [Newtonsoft.Json.JsonProperty("deliveryEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryEmail { get; set; }
    
        /// <summary>The estimated delivery time for the shopper to receive the goods.
        /// Allowed values:
        /// * `electronicDelivery`
        /// * `sameDayShipping`
        /// * `overnightShipping`
        /// * `twoOrMoreDaysShipping`</summary>
        [Newtonsoft.Json.JsonProperty("deliveryTimeframe", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MerchantRiskIndicatorDeliveryTimeframe DeliveryTimeframe { get; set; }
    
        /// <summary>The amount of prepaid or gift cards used for this purchase.</summary>
        [Newtonsoft.Json.JsonProperty("giftCardAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount GiftCardAmount { get; set; }
    
        /// <summary>Number of individual prepaid or gift cards used for this purchase.</summary>
        [Newtonsoft.Json.JsonProperty("giftCardCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GiftCardCount { get; set; }
    
        /// <summary>For pre-order purchases, the expected date this product will be available to the shopper.</summary>
        [Newtonsoft.Json.JsonProperty("preOrderDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PreOrderDate { get; set; }
    
        /// <summary>Whether this transaction is for pre-ordering a product.</summary>
        [Newtonsoft.Json.JsonProperty("preOrderPurchase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PreOrderPurchase { get; set; }
    
        /// <summary>Whether the shopper has already purchased the same items in the past.</summary>
        [Newtonsoft.Json.JsonProperty("reorderItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReorderItems { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ModificationRequest 
    {
        /// <summary>This field contains additional data, which may be required for a particular modification request.
        /// 
        /// The additionalData object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [ModificationRequest.additionalData](https://docs.adyen.com/developers/api-reference/payments-api/modificationrequest/modificationrequest-additionaldata) section.</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalData { get; set; }
    
        /// <summary>The merchant account that is used to process the payment.</summary>
        [Newtonsoft.Json.JsonProperty("merchantAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantAccount { get; set; }
    
        /// <summary>The amount that needs to be captured/refunded. Required for `/capture` and `/refund`, not allowed for `/cancel`. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.</summary>
        [Newtonsoft.Json.JsonProperty("modificationAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount ModificationAmount { get; set; }
    
        /// <summary>The original merchant reference to cancel.</summary>
        [Newtonsoft.Json.JsonProperty("originalMerchantReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalMerchantReference { get; set; }
    
        /// <summary>The original pspReference of the payment to modify.
        /// This reference is returned in:
        /// * authorisation response
        /// * authorisation notification</summary>
        [Newtonsoft.Json.JsonProperty("originalReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OriginalReference { get; set; }
    
        /// <summary>Optionally, you can specify your reference for the payment modification. This reference is visible in Customer Area and in reports.
        /// Maximum length: 80 characters.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>The details of how the payment should be split when distributing a payment to a Marketpay Marketplace and its Accounts.</summary>
        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Split> Splits { get; set; }
    
        /// <summary>The transaction reference provided by the PED. For Point-of-sale integrations only.</summary>
        [Newtonsoft.Json.JsonProperty("tenderReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenderReference { get; set; }
    
        /// <summary>Unique terminal ID for the PED that originally processed the request. For Point-of-sale integrations only.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueTerminalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueTerminalId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ModificationResult 
    {
        /// <summary>This field contains additional data, which may be returned in a particular modification response.</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalData { get; set; }
    
        /// <summary>Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PspReference { get; set; }
    
        /// <summary>Indicates if the modification request has been received for processing.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModificationResultResponse Response { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Name 
    {
        /// <summary>The first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }
    
        /// <summary>The gender.
        /// &gt;The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NameGender Gender { get; set; }
    
        /// <summary>The name's infix, if applicable.
        /// &gt;A maximum length of twenty (20) characters is imposed.</summary>
        [Newtonsoft.Json.JsonProperty("infix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Infix { get; set; }
    
        /// <summary>The last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentRequest 
    {
        /// <summary>Shopper account information for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("accountInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInfo AccountInfo { get; set; }
    
        /// <summary>If you want a [BIN or card verification](https://docs.adyen.com/developers/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).
        /// Required to be in the same currency as the `amount`. </summary>
        [Newtonsoft.Json.JsonProperty("additionalAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AdditionalAmount { get; set; }
    
        /// <summary>This field contains additional data, which may be required for a particular payment request.
        /// 
        /// The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/developers/api-reference/payments-api#paymentrequestadditionaldata).</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalData { get; set; }
    
        /// <summary>The amount information for the transaction. For [BIN or card verification](https://docs.adyen.com/developers/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public Amount Amount { get; set; }
    
        /// <summary>The details of the bank account, from which the payment should be made.
        /// &gt; Either `bankAccount` or `card` field must be provided in a payment request.</summary>
        [Newtonsoft.Json.JsonProperty("bankAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BankAccount BankAccount { get; set; }
    
        /// <summary>The address where to send the invoice.</summary>
        [Newtonsoft.Json.JsonProperty("billingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address BillingAddress { get; set; }
    
        /// <summary>The shopper's browser information.</summary>
        [Newtonsoft.Json.JsonProperty("browserInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrowserInfo BrowserInfo { get; set; }
    
        /// <summary>The delay between the authorisation and scheduled auto-capture, specified in hours.</summary>
        [Newtonsoft.Json.JsonProperty("captureDelayHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CaptureDelayHours { get; set; }
    
        /// <summary>A container for card data.
        /// &gt; Either `bankAccount` or `card` field must be provided in a payment request.</summary>
        [Newtonsoft.Json.JsonProperty("card", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Card Card { get; set; }
    
        /// <summary>The shopper's date of birth.
        /// 
        /// Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateOfBirth { get; set; }
    
        /// <summary>The forex quote as returned in the response of the forex service.</summary>
        [Newtonsoft.Json.JsonProperty("dccQuote", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexQuote DccQuote { get; set; }
    
        /// <summary>The address where the purchased goods should be delivered.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address DeliveryAddress { get; set; }
    
        /// <summary>The date and time the purchased goods should be delivered.
        /// 
        /// Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD
        /// 
        /// Example: 2017-07-17T13:42:40.428+01:00</summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeliveryDate { get; set; }
    
        /// <summary>A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/developers/risk-management/device-fingerprinting).</summary>
        [Newtonsoft.Json.JsonProperty("deviceFingerprint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceFingerprint { get; set; }
    
        /// <summary>The type of the entity the payment is processed for.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentRequestEntityType EntityType { get; set; }
    
        /// <summary>An integer value that is added to the normal fraud score. The value can be either positive or negative.</summary>
        [Newtonsoft.Json.JsonProperty("fraudOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FraudOffset { get; set; }
    
        /// <summary>Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/developers/payment-methods/installment-payments).</summary>
        [Newtonsoft.Json.JsonProperty("installments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Installments Installments { get; set; }
    
        /// <summary>The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</summary>
        [Newtonsoft.Json.JsonProperty("mcc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mcc { get; set; }
    
        /// <summary>The merchant account identifier, with which you want to process the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("merchantAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantAccount { get; set; }
    
        /// <summary>This reference allows linking multiple transactions to each other.
        /// &gt; We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.</summary>
        [Newtonsoft.Json.JsonProperty("merchantOrderReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderReference { get; set; }
    
        /// <summary>Additional risk fields for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("merchantRiskIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantRiskIndicator MerchantRiskIndicator { get; set; }
    
        /// <summary>Metadata consists of entries, each of which includes a key and a value.
        /// Limitations: Error "177", "Metadata size exceeds limit"</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }
    
        /// <summary>Authentication data produced by an MPI (Mastercard SecureCode or Verified By Visa).</summary>
        [Newtonsoft.Json.JsonProperty("mpiData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThreeDSecureData MpiData { get; set; }
    
        /// <summary>The two-character country code of the shopper's nationality.</summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Nationality { get; set; }
    
        /// <summary>When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.</summary>
        [Newtonsoft.Json.JsonProperty("orderReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderReference { get; set; }
    
        /// <summary>The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/developers/features/recurring-payments).</summary>
        [Newtonsoft.Json.JsonProperty("recurring", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Recurring Recurring { get; set; }
    
        /// <summary>Defines a recurring payment type.
        /// Allowed values:
        /// * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.
        /// * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
        /// * `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recurringProcessingModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentRequestRecurringProcessingModel RecurringProcessingModel { get; set; }
    
        /// <summary>The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
        /// If you need to provide multiple references for a transaction, separate them with hyphens ("-").
        /// Maximum length: 80 characters.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reference { get; set; }
    
        /// <summary>Some payment methods require defining a value for this field to specify how to process the transaction.
        /// 
        /// For the Bancontact payment method, it can be set to:
        /// * `maestro` (default), to be processed like a Maestro card, or
        /// * `bcmc`, to be processed like a Bancontact card.</summary>
        [Newtonsoft.Json.JsonProperty("selectedBrand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectedBrand { get; set; }
    
        /// <summary>The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.</summary>
        [Newtonsoft.Json.JsonProperty("selectedRecurringDetailReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectedRecurringDetailReference { get; set; }
    
        /// <summary>A session ID used to identify a payment session.</summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SessionId { get; set; }
    
        /// <summary>The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.</summary>
        [Newtonsoft.Json.JsonProperty("shopperEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperEmail { get; set; }
    
        /// <summary>The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).
        /// &gt; This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).</summary>
        [Newtonsoft.Json.JsonProperty("shopperIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperIP { get; set; }
    
        /// <summary>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
        /// For the web service API, Adyen assumes Ecommerce shopper interaction by default.
        /// 
        /// This field has the following possible values:
        /// * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
        /// * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
        /// * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
        /// * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</summary>
        [Newtonsoft.Json.JsonProperty("shopperInteraction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentRequestShopperInteraction ShopperInteraction { get; set; }
    
        /// <summary>The combination of a language code and a country code to specify the language to be used in the payment.</summary>
        [Newtonsoft.Json.JsonProperty("shopperLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperLocale { get; set; }
    
        /// <summary>The shopper's full name and gender (if specified).</summary>
        [Newtonsoft.Json.JsonProperty("shopperName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name ShopperName { get; set; }
    
        /// <summary>The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).
        /// &gt; This field is required for recurring payments.</summary>
        [Newtonsoft.Json.JsonProperty("shopperReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperReference { get; set; }
    
        /// <summary>The text to appear on the shopper's bank statement.</summary>
        [Newtonsoft.Json.JsonProperty("shopperStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperStatement { get; set; }
    
        /// <summary>The shopper's social security number.</summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialSecurityNumber { get; set; }
    
        /// <summary>The details of how the payment should be split when distributing a payment to a MarketPay Marketplace and its Accounts.</summary>
        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Split> Splits { get; set; }
    
        /// <summary>The physical store, for which this payment is processed.</summary>
        [Newtonsoft.Json.JsonProperty("store", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string Store { get; set; }
    
        /// <summary>The shopper's telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneNumber { get; set; }
    
        /// <summary>Request fields for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("threeDS2RequestData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThreeDS2RequestData ThreeDS2RequestData { get; set; }
    
        /// <summary>The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).</summary>
        [Newtonsoft.Json.JsonProperty("totalsGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string TotalsGroup { get; set; }
    
        /// <summary>Set to true if the payment should be routed to a trusted MID.</summary>
        [Newtonsoft.Json.JsonProperty("trustedShopper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TrustedShopper { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentRequest3d 
    {
        /// <summary>Shopper account information for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("accountInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInfo AccountInfo { get; set; }
    
        /// <summary>If you want a [BIN or card verification](https://docs.adyen.com/developers/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).
        /// Required to be in the same currency as the `amount`. </summary>
        [Newtonsoft.Json.JsonProperty("additionalAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AdditionalAmount { get; set; }
    
        /// <summary>This field contains additional data, which may be required for a particular payment request.
        /// 
        /// The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/developers/api-reference/payments-api#paymentrequestadditionaldata).</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalData { get; set; }
    
        /// <summary>The amount information for the transaction. For [BIN or card verification](https://docs.adyen.com/developers/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }
    
        /// <summary>The address where to send the invoice.</summary>
        [Newtonsoft.Json.JsonProperty("billingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address BillingAddress { get; set; }
    
        /// <summary>The shopper's browser information.</summary>
        [Newtonsoft.Json.JsonProperty("browserInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrowserInfo BrowserInfo { get; set; }
    
        /// <summary>The delay between the authorisation and scheduled auto-capture, specified in hours.</summary>
        [Newtonsoft.Json.JsonProperty("captureDelayHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CaptureDelayHours { get; set; }
    
        /// <summary>The shopper's date of birth.
        /// 
        /// Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateOfBirth { get; set; }
    
        /// <summary>The forex quote as returned in the response of the forex service.</summary>
        [Newtonsoft.Json.JsonProperty("dccQuote", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexQuote DccQuote { get; set; }
    
        /// <summary>The address where the purchased goods should be delivered.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address DeliveryAddress { get; set; }
    
        /// <summary>The date and time the purchased goods should be delivered.
        /// 
        /// Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD
        /// 
        /// Example: 2017-07-17T13:42:40.428+01:00</summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeliveryDate { get; set; }
    
        /// <summary>A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/developers/risk-management/device-fingerprinting).</summary>
        [Newtonsoft.Json.JsonProperty("deviceFingerprint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceFingerprint { get; set; }
    
        /// <summary>An integer value that is added to the normal fraud score. The value can be either positive or negative.</summary>
        [Newtonsoft.Json.JsonProperty("fraudOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FraudOffset { get; set; }
    
        /// <summary>Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/developers/payment-methods/installment-payments).</summary>
        [Newtonsoft.Json.JsonProperty("installments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Installments Installments { get; set; }
    
        /// <summary>The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</summary>
        [Newtonsoft.Json.JsonProperty("mcc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mcc { get; set; }
    
        /// <summary>The payment session identifier returned by the card issuer.</summary>
        [Newtonsoft.Json.JsonProperty("md", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md { get; set; }
    
        /// <summary>The merchant account identifier, with which you want to process the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("merchantAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantAccount { get; set; }
    
        /// <summary>This reference allows linking multiple transactions to each other.
        /// &gt; We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.</summary>
        [Newtonsoft.Json.JsonProperty("merchantOrderReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderReference { get; set; }
    
        /// <summary>Additional risk fields for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("merchantRiskIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantRiskIndicator MerchantRiskIndicator { get; set; }
    
        /// <summary>Metadata consists of entries, each of which includes a key and a value.
        /// Limitations: Error "177", "Metadata size exceeds limit"</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }
    
        /// <summary>When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.</summary>
        [Newtonsoft.Json.JsonProperty("orderReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderReference { get; set; }
    
        /// <summary>Payment authorisation response returned by the card issuer. The `paResponse` field holds the PaRes value received from the card issuer.</summary>
        [Newtonsoft.Json.JsonProperty("paResponse", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PaResponse { get; set; }
    
        /// <summary>The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/developers/features/recurring-payments).</summary>
        [Newtonsoft.Json.JsonProperty("recurring", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Recurring Recurring { get; set; }
    
        /// <summary>Defines a recurring payment type.
        /// Allowed values:
        /// * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.
        /// * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
        /// * `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recurringProcessingModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentRequest3dRecurringProcessingModel RecurringProcessingModel { get; set; }
    
        /// <summary>The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
        /// If you need to provide multiple references for a transaction, separate them with hyphens ("-").
        /// Maximum length: 80 characters.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Some payment methods require defining a value for this field to specify how to process the transaction.
        /// 
        /// For the Bancontact payment method, it can be set to:
        /// * `maestro` (default), to be processed like a Maestro card, or
        /// * `bcmc`, to be processed like a Bancontact card.</summary>
        [Newtonsoft.Json.JsonProperty("selectedBrand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectedBrand { get; set; }
    
        /// <summary>The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.</summary>
        [Newtonsoft.Json.JsonProperty("selectedRecurringDetailReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectedRecurringDetailReference { get; set; }
    
        /// <summary>A session ID used to identify a payment session.</summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SessionId { get; set; }
    
        /// <summary>The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.</summary>
        [Newtonsoft.Json.JsonProperty("shopperEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperEmail { get; set; }
    
        /// <summary>The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).
        /// &gt; This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).</summary>
        [Newtonsoft.Json.JsonProperty("shopperIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperIP { get; set; }
    
        /// <summary>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
        /// For the web service API, Adyen assumes Ecommerce shopper interaction by default.
        /// 
        /// This field has the following possible values:
        /// * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
        /// * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
        /// * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
        /// * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</summary>
        [Newtonsoft.Json.JsonProperty("shopperInteraction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentRequest3dShopperInteraction ShopperInteraction { get; set; }
    
        /// <summary>The combination of a language code and a country code to specify the language to be used in the payment.</summary>
        [Newtonsoft.Json.JsonProperty("shopperLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperLocale { get; set; }
    
        /// <summary>The shopper's full name and gender (if specified).</summary>
        [Newtonsoft.Json.JsonProperty("shopperName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name ShopperName { get; set; }
    
        /// <summary>The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).
        /// &gt; This field is required for recurring payments.</summary>
        [Newtonsoft.Json.JsonProperty("shopperReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperReference { get; set; }
    
        /// <summary>The text to appear on the shopper's bank statement.</summary>
        [Newtonsoft.Json.JsonProperty("shopperStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperStatement { get; set; }
    
        /// <summary>The shopper's social security number.</summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialSecurityNumber { get; set; }
    
        /// <summary>The details of how the payment should be split when distributing a payment to a MarketPay Marketplace and its Accounts.</summary>
        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Split> Splits { get; set; }
    
        /// <summary>The physical store, for which this payment is processed.</summary>
        [Newtonsoft.Json.JsonProperty("store", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string Store { get; set; }
    
        /// <summary>The shopper's telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneNumber { get; set; }
    
        /// <summary>Request fields for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("threeDS2RequestData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThreeDS2RequestData ThreeDS2RequestData { get; set; }
    
        /// <summary>The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).</summary>
        [Newtonsoft.Json.JsonProperty("totalsGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string TotalsGroup { get; set; }
    
        /// <summary>Set to true if the payment should be routed to a trusted MID.</summary>
        [Newtonsoft.Json.JsonProperty("trustedShopper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TrustedShopper { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentRequest3ds2 
    {
        /// <summary>Shopper account information for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("accountInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInfo AccountInfo { get; set; }
    
        /// <summary>If you want a [BIN or card verification](https://docs.adyen.com/developers/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).
        /// Required to be in the same currency as the `amount`. </summary>
        [Newtonsoft.Json.JsonProperty("additionalAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AdditionalAmount { get; set; }
    
        /// <summary>This field contains additional data, which may be required for a particular payment request.
        /// 
        /// The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/developers/api-reference/payments-api#paymentrequestadditionaldata).</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalData { get; set; }
    
        /// <summary>The amount information for the transaction. For [BIN or card verification](https://docs.adyen.com/developers/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public Amount Amount { get; set; }
    
        /// <summary>The address where to send the invoice.</summary>
        [Newtonsoft.Json.JsonProperty("billingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address BillingAddress { get; set; }
    
        /// <summary>The shopper's browser information.</summary>
        [Newtonsoft.Json.JsonProperty("browserInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrowserInfo BrowserInfo { get; set; }
    
        /// <summary>The delay between the authorisation and scheduled auto-capture, specified in hours.</summary>
        [Newtonsoft.Json.JsonProperty("captureDelayHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CaptureDelayHours { get; set; }
    
        /// <summary>The shopper's date of birth.
        /// 
        /// Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateOfBirth { get; set; }
    
        /// <summary>The forex quote as returned in the response of the forex service.</summary>
        [Newtonsoft.Json.JsonProperty("dccQuote", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForexQuote DccQuote { get; set; }
    
        /// <summary>The address where the purchased goods should be delivered.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address DeliveryAddress { get; set; }
    
        /// <summary>The date and time the purchased goods should be delivered.
        /// 
        /// Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD
        /// 
        /// Example: 2017-07-17T13:42:40.428+01:00</summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeliveryDate { get; set; }
    
        /// <summary>A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/developers/risk-management/device-fingerprinting).</summary>
        [Newtonsoft.Json.JsonProperty("deviceFingerprint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceFingerprint { get; set; }
    
        /// <summary>An integer value that is added to the normal fraud score. The value can be either positive or negative.</summary>
        [Newtonsoft.Json.JsonProperty("fraudOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FraudOffset { get; set; }
    
        /// <summary>Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/developers/payment-methods/installment-payments).</summary>
        [Newtonsoft.Json.JsonProperty("installments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Installments Installments { get; set; }
    
        /// <summary>The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.</summary>
        [Newtonsoft.Json.JsonProperty("mcc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mcc { get; set; }
    
        /// <summary>The merchant account identifier, with which you want to process the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("merchantAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantAccount { get; set; }
    
        /// <summary>This reference allows linking multiple transactions to each other.
        /// &gt; We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.</summary>
        [Newtonsoft.Json.JsonProperty("merchantOrderReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderReference { get; set; }
    
        /// <summary>Additional risk fields for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("merchantRiskIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantRiskIndicator MerchantRiskIndicator { get; set; }
    
        /// <summary>Metadata consists of entries, each of which includes a key and a value.
        /// Limitations: Error "177", "Metadata size exceeds limit"</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }
    
        /// <summary>When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.</summary>
        [Newtonsoft.Json.JsonProperty("orderReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderReference { get; set; }
    
        /// <summary>The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/developers/features/recurring-payments).</summary>
        [Newtonsoft.Json.JsonProperty("recurring", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Recurring Recurring { get; set; }
    
        /// <summary>Defines a recurring payment type.
        /// Allowed values:
        /// * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.
        /// * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
        /// * `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recurringProcessingModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentRequest3ds2RecurringProcessingModel RecurringProcessingModel { get; set; }
    
        /// <summary>The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
        /// If you need to provide multiple references for a transaction, separate them with hyphens ("-").
        /// Maximum length: 80 characters.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reference { get; set; }
    
        /// <summary>Some payment methods require defining a value for this field to specify how to process the transaction.
        /// 
        /// For the Bancontact payment method, it can be set to:
        /// * `maestro` (default), to be processed like a Maestro card, or
        /// * `bcmc`, to be processed like a Bancontact card.</summary>
        [Newtonsoft.Json.JsonProperty("selectedBrand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectedBrand { get; set; }
    
        /// <summary>The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.</summary>
        [Newtonsoft.Json.JsonProperty("selectedRecurringDetailReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectedRecurringDetailReference { get; set; }
    
        /// <summary>A session ID used to identify a payment session.</summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SessionId { get; set; }
    
        /// <summary>The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.</summary>
        [Newtonsoft.Json.JsonProperty("shopperEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperEmail { get; set; }
    
        /// <summary>The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).
        /// &gt; This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).</summary>
        [Newtonsoft.Json.JsonProperty("shopperIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperIP { get; set; }
    
        /// <summary>Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
        /// For the web service API, Adyen assumes Ecommerce shopper interaction by default.
        /// 
        /// This field has the following possible values:
        /// * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
        /// * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
        /// * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
        /// * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.</summary>
        [Newtonsoft.Json.JsonProperty("shopperInteraction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentRequest3ds2ShopperInteraction ShopperInteraction { get; set; }
    
        /// <summary>The combination of a language code and a country code to specify the language to be used in the payment.</summary>
        [Newtonsoft.Json.JsonProperty("shopperLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperLocale { get; set; }
    
        /// <summary>The shopper's full name and gender (if specified).</summary>
        [Newtonsoft.Json.JsonProperty("shopperName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name ShopperName { get; set; }
    
        /// <summary>The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).
        /// &gt; This field is required for recurring payments.</summary>
        [Newtonsoft.Json.JsonProperty("shopperReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperReference { get; set; }
    
        /// <summary>The text to appear on the shopper's bank statement.</summary>
        [Newtonsoft.Json.JsonProperty("shopperStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShopperStatement { get; set; }
    
        /// <summary>The shopper's social security number.</summary>
        [Newtonsoft.Json.JsonProperty("socialSecurityNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialSecurityNumber { get; set; }
    
        /// <summary>The details of how the payment should be split when distributing a payment to a MarketPay Marketplace and its Accounts.</summary>
        [Newtonsoft.Json.JsonProperty("splits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Split> Splits { get; set; }
    
        /// <summary>The physical store, for which this payment is processed.</summary>
        [Newtonsoft.Json.JsonProperty("store", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string Store { get; set; }
    
        /// <summary>The shopper's telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneNumber { get; set; }
    
        /// <summary>Request fields for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("threeDS2RequestData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThreeDS2RequestData ThreeDS2RequestData { get; set; }
    
        /// <summary>Thre ThreeDS2Result that was returned in the final CRes.</summary>
        [Newtonsoft.Json.JsonProperty("threeDS2Result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThreeDS2Result ThreeDS2Result { get; set; }
    
        /// <summary>The ThreeDS2Token that was returned in the /authorise call.</summary>
        [Newtonsoft.Json.JsonProperty("threeDS2Token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreeDS2Token { get; set; }
    
        /// <summary>The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).</summary>
        [Newtonsoft.Json.JsonProperty("totalsGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string TotalsGroup { get; set; }
    
        /// <summary>Set to true if the payment should be routed to a trusted MID.</summary>
        [Newtonsoft.Json.JsonProperty("trustedShopper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TrustedShopper { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentResult 
    {
        /// <summary>This field contains additional data, which may be required to return in a particular payment response. To choose data fields to be returned, go to **Customer Area** &gt; **Account** &gt; **API URLs**.</summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalData { get; set; }
    
        /// <summary>Authorisation code:
        /// * When the payment is authorised successfully, this field holds the authorisation code for the payment.
        /// * When the payment is not authorised, this field is empty.</summary>
        [Newtonsoft.Json.JsonProperty("authCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthCode { get; set; }
    
        /// <summary>Includes the currency of the conversion and the value of the transaction.
        /// &gt; This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).</summary>
        [Newtonsoft.Json.JsonProperty("dccAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount DccAmount { get; set; }
    
        /// <summary>Cryptographic signature used to verify `dccQuote`.
        /// &gt; This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).</summary>
        [Newtonsoft.Json.JsonProperty("dccSignature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DccSignature { get; set; }
    
        /// <summary>The fraud result properties of the payment.</summary>
        [Newtonsoft.Json.JsonProperty("fraudResult", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FraudResult FraudResult { get; set; }
    
        /// <summary>The URL to direct the shopper to.
        /// &gt; In case of SecurePlus, do not redirect a shopper to this URL.</summary>
        [Newtonsoft.Json.JsonProperty("issuerUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuerUrl { get; set; }
    
        /// <summary>The payment session.</summary>
        [Newtonsoft.Json.JsonProperty("md", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Md { get; set; }
    
        /// <summary>The 3D request data for the issuer.
        /// 
        /// If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/developers/risk-management/3d-secure).</summary>
        [Newtonsoft.Json.JsonProperty("paRequest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaRequest { get; set; }
    
        /// <summary>Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
        /// 
        /// &gt; `pspReference` is returned only for non-redirect payment methods.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PspReference { get; set; }
    
        /// <summary>If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error.
        /// 
        /// When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.</summary>
        [Newtonsoft.Json.JsonProperty("refusalReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefusalReason { get; set; }
    
        /// <summary>The result of the payment. Possible values:
        /// 
        /// * **Authorised** – Indicates the payment authorisation was successfully completed. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.
        /// * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.
        /// * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.
        /// * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.
        /// * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.
        /// * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. For more information on handling a pending payment, refer to [Payments with pending status](https://docs.adyen.com/developers/development-resources/payments-with-pending-status).
        /// * **Error** – Indicates an error occurred during processing of the payment. The reason is given in the `refusalReason` field. This is a final state.</summary>
        [Newtonsoft.Json.JsonProperty("resultCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentResultResultCode ResultCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Recurring 
    {
        /// <summary>The type of recurring contract to be used.
        /// Possible values:
        /// * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/developers/payment-glossary#cardsecuritycodecvccvvcid).
        /// * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/developers/payment-glossary#cardnotpresentcnp).
        /// * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
        /// * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/developers/features/third-party-payouts).</summary>
        [Newtonsoft.Json.JsonProperty("contract", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RecurringContract Contract { get; set; }
    
        /// <summary>A descriptive name for this detail.</summary>
        [Newtonsoft.Json.JsonProperty("recurringDetailName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecurringDetailName { get; set; }
    
        /// <summary>Date after which no further authorisations shall be performed. Only for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("recurringExpiry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RecurringExpiry { get; set; }
    
        /// <summary>Minimum number of days between authorisations. Only for 3D Secure 2.</summary>
        [Newtonsoft.Json.JsonProperty("recurringFrequency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecurringFrequency { get; set; }
    
        /// <summary>The name of the token service.</summary>
        [Newtonsoft.Json.JsonProperty("tokenService", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RecurringTokenService TokenService { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SDKEphemPubKey 
    {
        /// <summary>The `crv` value as received from the 3D Secure 2 SDK.</summary>
        [Newtonsoft.Json.JsonProperty("crv", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Crv { get; set; }
    
        /// <summary>The `kty` value as received from the 3D Secure 2 SDK.</summary>
        [Newtonsoft.Json.JsonProperty("kty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kty { get; set; }
    
        /// <summary>The `x` value as received from the 3D Secure 2 SDK.</summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string X { get; set; }
    
        /// <summary>The `y` value as received from the 3D Secure 2 SDK.</summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Y { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Split 
    {
        /// <summary>The account to which this split applies.
        /// 
        /// &gt;Required if the type is `MarketPlace`.</summary>
        [Newtonsoft.Json.JsonProperty("account", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account { get; set; }
    
        /// <summary>The amount of this split.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public SplitAmount Amount { get; set; }
    
        /// <summary>A description of this split.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The reference of this split. Used to link other operations (e.g. captures and refunds) to this split.
        /// 
        /// &gt;Required if the type is `MarketPlace`.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>The type of this split.
        /// 
        /// &gt;Permitted values: `Default`, `PaymentFee`, `VAT`, `Commission`, `MarketPlace`, `Verification`.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SplitType Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SplitAmount 
    {
        /// <summary>The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes).
        /// 
        /// If this value is not provided, the currency in which the payment is made will be used.</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string Currency { get; set; }
    
        /// <summary>The payable amount that can be charged for the transaction.
        /// 
        /// The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/developers/development-resources/currency-codes).</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public long Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ThreeDS2RequestData 
    {
        /// <summary>If set to true, you will only do the 3D Secure 2 authentication, not the payment authorization.</summary>
        [Newtonsoft.Json.JsonProperty("authenticationOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AuthenticationOnly { get; set; }
    
        /// <summary>Possibility to specify a preference for receiving a challenge from the issuer.
        /// Allowed values:
        /// * `noPreference`
        /// * `requestNoChallenge`
        /// * `requestChallenge`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("challengeIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ThreeDS2RequestDataChallengeIndicator ChallengeIndicator { get; set; }
    
        /// <summary>The environment of the shopper.
        /// Allowed values:
        /// * `app`
        /// * `browser`</summary>
        [Newtonsoft.Json.JsonProperty("deviceChannel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceChannel { get; set; }
    
        /// <summary>Display options for the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.</summary>
        [Newtonsoft.Json.JsonProperty("deviceRenderOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceRenderOptions DeviceRenderOptions { get; set; }
    
        /// <summary>The `messageVersion` value indicating the 3D Secure 2 protocol version.</summary>
        [Newtonsoft.Json.JsonProperty("messageVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageVersion { get; set; }
    
        /// <summary>URL the `CRes` value will be sent.
        /// Only for `deviceChannel` set to **browser**.</summary>
        [Newtonsoft.Json.JsonProperty("notificationURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationURL { get; set; }
    
        /// <summary>The `sdkAppID` value as received from the 3D Secure 2 SDK.
        /// Only for `deviceChannel` set to **app**.</summary>
        [Newtonsoft.Json.JsonProperty("sdkAppID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SdkAppID { get; set; }
    
        /// <summary>The `sdkEncData` value as received from the 3D Secure 2 SDK.
        /// Only for `deviceChannel` set to **app**.</summary>
        [Newtonsoft.Json.JsonProperty("sdkEncData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SdkEncData { get; set; }
    
        /// <summary>The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK.
        /// Only for `deviceChannel` set to **app**.</summary>
        [Newtonsoft.Json.JsonProperty("sdkEphemPubKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SDKEphemPubKey SdkEphemPubKey { get; set; }
    
        /// <summary>The maximum amount of time in minutes for the 3D Secure 2 authentication process.
        /// Only for `deviceChannel` set to **app**.</summary>
        [Newtonsoft.Json.JsonProperty("sdkMaxTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SdkMaxTimeout { get; set; }
    
        /// <summary>The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.
        /// Only for `deviceChannel` set to **app**.</summary>
        [Newtonsoft.Json.JsonProperty("sdkReferenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SdkReferenceNumber { get; set; }
    
        /// <summary>The `sdkTransID` value as received from the 3D Secure 2 SDK.
        /// Only for `deviceChannel` set to **app**.</summary>
        [Newtonsoft.Json.JsonProperty("sdkTransID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SdkTransID { get; set; }
    
        /// <summary>Unique 3D Secure requestor identifier assigned by the Directory Server.</summary>
        [Newtonsoft.Json.JsonProperty("threeDSRequestorID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreeDSRequestorID { get; set; }
    
        /// <summary>Unique 3D Secure requestor name assigned by the Directory Server.</summary>
        [Newtonsoft.Json.JsonProperty("threeDSRequestorName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreeDSRequestorName { get; set; }
    
        /// <summary>URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.</summary>
        [Newtonsoft.Json.JsonProperty("threeDSRequestorURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreeDSRequestorURL { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ThreeDS2Result 
    {
        /// <summary>The `authenticationValue` value as defined in the 3D Secure 2 specification.</summary>
        [Newtonsoft.Json.JsonProperty("authenticationValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthenticationValue { get; set; }
    
        /// <summary>The `dsTransID` value as defined in the 3D Secure 2 specification.</summary>
        [Newtonsoft.Json.JsonProperty("dsTransID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DsTransID { get; set; }
    
        /// <summary>The `eci` value as defined in the 3D Secure 2 specification.</summary>
        [Newtonsoft.Json.JsonProperty("eci", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eci { get; set; }
    
        /// <summary>The `threeDSServerTransID` value as defined in the 3D Secure 2 specification.</summary>
        [Newtonsoft.Json.JsonProperty("threeDSServerTransID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreeDSServerTransID { get; set; }
    
        /// <summary>The `timestamp` value of the 3D Secure 2 authentication.</summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }
    
        /// <summary>The `transStatus` value as defined in the 3D Secure 2 specification.</summary>
        [Newtonsoft.Json.JsonProperty("transStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransStatus { get; set; }
    
        /// <summary>The `transStatusReason` value as defined in the 3D Secure 2 specification.</summary>
        [Newtonsoft.Json.JsonProperty("transStatusReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransStatusReason { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ThreeDS2ResultRequest 
    {
        /// <summary>The merchant account identifier, with which you want to process the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("merchantAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantAccount { get; set; }
    
        /// <summary>The pspReference returned in the /authorise call.</summary>
        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ThreeDS2ResultResponse 
    {
        /// <summary>The result of the 3D Secure 2 authentication.</summary>
        [Newtonsoft.Json.JsonProperty("threeDS2Result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThreeDS2Result ThreeDS2Result { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ThreeDSecureData 
    {
        /// <summary>In 3D Secure 1, the authentication response if the shopper was redirected.
        /// 
        /// In 3D Secure 2, this is the `transStatus` from challenge flow. If the transaction was frictionless, set this value to **Y**.</summary>
        [Newtonsoft.Json.JsonProperty("authenticationResponse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ThreeDSecureDataAuthenticationResponse AuthenticationResponse { get; set; }
    
        /// <summary>The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).</summary>
        [Newtonsoft.Json.JsonProperty("cavv", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Cavv { get; set; }
    
        /// <summary>The CAVV algorithm used. Include this only for 3D Secure 1.</summary>
        [Newtonsoft.Json.JsonProperty("cavvAlgorithm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CavvAlgorithm { get; set; }
    
        /// <summary>In 3D Secure 1, this is the enrollment response from the 3D directory server.
        /// 
        /// In 3D Secure 2, this is the `transStatus` from 3D Secure device fingerprinting result.</summary>
        [Newtonsoft.Json.JsonProperty("directoryResponse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ThreeDSecureDataDirectoryResponse DirectoryResponse { get; set; }
    
        /// <summary>The electronic commerce indicator.</summary>
        [Newtonsoft.Json.JsonProperty("eci", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eci { get; set; }
    
        /// <summary>The version of the 3D Secure protocol.</summary>
        [Newtonsoft.Json.JsonProperty("threeDSVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThreeDSVersion { get; set; }
    
        /// <summary>The transaction identifier (Base64-encoded, 20 bytes in a decoded form).
        /// 
        /// In 3D Secure 2, this is the `threeDSServerTransID`.</summary>
        [Newtonsoft.Json.JsonProperty("xid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Xid { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountInfoAccountAgeIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"notApplicable")]
        NotApplicable = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thisTransaction")]
        ThisTransaction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lessThan30Days")]
        LessThan30Days = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"from30To60Days")]
        From30To60Days = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"moreThan60Days")]
        MoreThan60Days = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountInfoAccountChangeIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"thisTransaction")]
        ThisTransaction = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lessThan30Days")]
        LessThan30Days = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"from30To60Days")]
        From30To60Days = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"moreThan60Days")]
        MoreThan60Days = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountInfoDeliveryAddressUsageIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"thisTransaction")]
        ThisTransaction = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lessThan30Days")]
        LessThan30Days = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"from30To60Days")]
        From30To60Days = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"moreThan60Days")]
        MoreThan60Days = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountInfoPasswordChangeIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"notApplicable")]
        NotApplicable = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thisTransaction")]
        ThisTransaction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lessThan30Days")]
        LessThan30Days = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"from30To60Days")]
        From30To60Days = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"moreThan60Days")]
        MoreThan60Days = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountInfoPaymentAccountIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"notApplicable")]
        NotApplicable = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"thisTransaction")]
        ThisTransaction = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lessThan30Days")]
        LessThan30Days = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"from30To60Days")]
        From30To60Days = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"moreThan60Days")]
        MoreThan60Days = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeviceRenderOptionsSdkInterface
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Html")]
        Html = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Native")]
        Native = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"both")]
        Both = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SdkUiType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"multiSelect")]
        MultiSelect = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"otherHtml")]
        OtherHtml = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"outOfBand")]
        OutOfBand = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singleSelect")]
        SingleSelect = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"text")]
        Text = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MerchantRiskIndicatorDeliveryAddressIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"shipToBillingAddress")]
        ShipToBillingAddress = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shipToVerifiedAddress")]
        ShipToVerifiedAddress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shipToNewAddress")]
        ShipToNewAddress = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shipToStore")]
        ShipToStore = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"digitalGoods")]
        DigitalGoods = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"goodsNotShipped")]
        GoodsNotShipped = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MerchantRiskIndicatorDeliveryTimeframe
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electronicDelivery")]
        ElectronicDelivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sameDayShipping")]
        SameDayShipping = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"overnightShipping")]
        OvernightShipping = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"twoOrMoreDaysShipping")]
        TwoOrMoreDaysShipping = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ModificationResultResponse
    {
        [System.Runtime.Serialization.EnumMember(Value = @"[capture-received]")]
        [captureReceived] = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"[cancel-received]")]
        [cancelReceived] = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"[refund-received]")]
        [refundReceived] = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"[cancelOrRefund-received]")]
        [cancelOrRefundReceived] = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NameGender
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentRequestEntityType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NaturalPerson")]
        NaturalPerson = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CompanyName")]
        CompanyName = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentRequestRecurringProcessingModel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CardOnFile")]
        CardOnFile = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnscheduledCardOnFile")]
        UnscheduledCardOnFile = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentRequestShopperInteraction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ecommerce")]
        Ecommerce = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContAuth")]
        ContAuth = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Moto")]
        Moto = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POS")]
        POS = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentRequest3dRecurringProcessingModel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CardOnFile")]
        CardOnFile = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnscheduledCardOnFile")]
        UnscheduledCardOnFile = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentRequest3dShopperInteraction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ecommerce")]
        Ecommerce = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContAuth")]
        ContAuth = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Moto")]
        Moto = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POS")]
        POS = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentRequest3ds2RecurringProcessingModel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CardOnFile")]
        CardOnFile = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnscheduledCardOnFile")]
        UnscheduledCardOnFile = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentRequest3ds2ShopperInteraction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ecommerce")]
        Ecommerce = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ContAuth")]
        ContAuth = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Moto")]
        Moto = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POS")]
        POS = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentResultResultCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Authorised")]
        Authorised = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyAuthorised")]
        PartiallyAuthorised = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Refused")]
        Refused = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RedirectShopper")]
        RedirectShopper = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RecurringContract
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ONECLICK")]
        ONECLICK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RECURRING")]
        RECURRING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAYOUT")]
        PAYOUT = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RecurringTokenService
    {
        [System.Runtime.Serialization.EnumMember(Value = @"VISATOKENSERVICE")]
        VISATOKENSERVICE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MCTOKENSERVICE")]
        MCTOKENSERVICE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SplitType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Commission")]
        Commission = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MarketPlace")]
        MarketPlace = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PaymentFee")]
        PaymentFee = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VAT")]
        VAT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Verification")]
        Verification = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ThreeDS2RequestDataChallengeIndicator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"noPreference")]
        NoPreference = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"requestNoChallenge")]
        RequestNoChallenge = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"requestChallenge")]
        RequestChallenge = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ThreeDSecureDataAuthenticationResponse
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"U")]
        U = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.19.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ThreeDSecureDataDirectoryResponse
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"U")]
        U = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 4,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.1.0 (NJsonSchema v10.0.19.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108